/* eslint no-console: 0*/
const { promisify } = require('util');
const postcss = require('postcss');
const syntax = require('postcss-scss');
const fs = require('fs');
const path = require('path');
const browsers = require('@xero/browserslist-autoprefixer');
const autoprefixer = require('autoprefixer');
const readFileAsync = promisify(fs.readFile);
const writeFileAsync = promisify(fs.writeFile);
const {
	rootDirectory,
	createFolderIfNotExists,
	taskRunner,
	taskRunnerReturns
} = require('../../helpers');

const { succeed, fail } = taskRunnerReturns;

const constants = path.resolve(
	rootDirectory,
	'.kss',
	'builder',
	'parser',
	'constants'
);
const { variablePages, mixinPages, types } = require(constants);

const ignoreStart = '@tokenparserstartignore';
const ignoreEnd = '@tokenparserendignore';

const trimFileRegex = new RegExp(
				`${ignoreStart}.*?${ignoreEnd}`,
				'gms'
);

const outputDir = path.resolve(rootDirectory, 'src', 'sass', 'tmp');
const disclaimer = `/* This file is generated by ./scripts/build/kss/tmp.js. All changes to this file will be eaten.*/\n`;

const variableParser = require(path.resolve(
	rootDirectory,
	'scripts',
	'build',
	'postcss',
	'private',
	'variableparser'
));
const mixinParser = require(path.resolve(
	rootDirectory,
	'scripts',
	'build',
	'postcss',
	'private',
	'mixinparser'
));

const generateKssFiles = (page, parser) => {
	return readFileAsync(page.source, 'utf8')
		.then(sourceFileContent => {
			return sourceFileContent.replace(trimFileRegex, '');
		})
		.then(scss => {
			return postcss([autoprefixer({grid: true, browsers})])
				.process(scss, { from: scss, syntax })
				.then(({ root }) => {
					const output = parser(page, root, page.source, types);
					const outputFileName = path.join(
						outputDir,
						path.basename(page.source)
					);
					return writeFileAsync(outputFileName, disclaimer + output.join('\n'))
						.then(succeed)
						.catch(fail);
				});
		})
};

function run() {
	return taskRunner(
		() =>
			createFolderIfNotExists(outputDir)
				.then(() => {
					const variablePromises = variablePages.map(page =>
						generateKssFiles(page, variableParser)
					);
					const mixinPromises = mixinPages.map(page =>
						generateKssFiles(page, mixinParser)
					);
					return Promise.all([...variablePromises, ...mixinPromises]);
				})
				.then(succeed)
				.catch(fail),
		__filename
	);
}

module.exports = run;
require('make-runnable/custom')({ printOutputFrame: false });
