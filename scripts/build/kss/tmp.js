/* eslint no-console: 0*/
const { promisify } = require('util');
const postcss = require('postcss');
const syntax = require('postcss-scss');
const fs = require('fs');
const path = require('path');
const browsers = require('@xero/browserslist-autoprefixer');
const autoprefixer = require('autoprefixer');
const readFileAsync = promisify(fs.readFile);
const writeFileAsync = promisify(fs.writeFile);
const {
  rootDirectory,
  createFolderIfNotExists,
  taskRunner,
  taskRunnerReturns,
} = require('../../helpers');

const { succeed, fail } = taskRunnerReturns;

const { variablePages, mixinPages, types } = require('../../../.kss/builder/parser/constants');

const ignoreStart = '@tokenparserstartignore';
const ignoreEnd = '@tokenparserendignore';

const trimFileRegex = new RegExp(`${ignoreStart}.*?${ignoreEnd}`, 'gms');

const outputDir = path.resolve(rootDirectory, 'src', 'sass', 'tmp');
const disclaimer = `/* This file is generated by ./scripts/build/kss/tmp.js. All changes to this file will be eaten.*/\n`;

const variableParser = require('../postcss/private/variableparser');
const mixinParser = require('../postcss/private/mixinparser');

const generateKssFiles = async (page, parser) => {
  const sourceFileContent = await readFileAsync(page.source, 'utf8');

  const scss = sourceFileContent.replace(trimFileRegex, '');

  const { root } = await postcss([
    autoprefixer({ grid: true, overrideBrowserslist: browsers }),
  ]).process(scss, { from: scss, syntax });

  const output = parser(page, root, page.source, types);
  const outputFileName = path.join(outputDir, path.basename(page.source));
  try {
    await writeFileAsync(outputFileName, disclaimer + output.join('\n'));
    return succeed();
  } catch (error) {
    return fail(error);
  }
};

function run() {
  return taskRunner(async () => {
    await createFolderIfNotExists(outputDir);

    try {
      const variablePromises = variablePages.map(page => generateKssFiles(page, variableParser));
      const mixinPromises = mixinPages.map(page => generateKssFiles(page, mixinParser));
      await Promise.all([...variablePromises, ...mixinPromises]);

      return succeed();
    } catch (error) {
      return fail(error);
    }
  }, __filename);
}

module.exports = run;
require('make-runnable/custom')({ printOutputFrame: false });
