//------------------------------------------------------------------------------
// Dropdowns landing page
//------------------------------------------------------------------------------

// Dropdowns
//
// Teaser:
// Used to reveal additional actions not present on the parent page.
//
// Introduction:
// Dropdowns are used to reveal additional actions not present on the parent page.
// XUI provides the CSS as well as several React components for implementing each dropdown variant.
//
// Styleguide: Building Blocks.Dropdowns

// Anatomy
//
// ExampleClass: ds-example-verticallycentered
//
// Dropdowns are the most common use case for the [picklist](section-building-blocks-picklist.html) component.
// To create a dropdown, use the following classes, with a picklist inside.
//
// Classes:
// xui-dropdown-layout: Dropdown container
// xui-dropdown--mask: Empty element to mask background page at narrow viewports
// xui-dropdown--body: Dropdown content
//
// Markup:
// <div class='xui-dropdown-layout xui-dropdown-is-open'>
//   <div class='xui-dropdown--mask'></div>
//   <div class='xui-dropdown--body'>
//     <ul class="xui-picklist xui-picklist-layout" role="tree">
//       <li class="xui-pickitem" role="treeitem" tabindex="-1" >
//         <button type="button" class="xui-pickitem--body">
//           <span class="xui-pickitem--text">Edit</span>
//         </button>
//       </li>
//       <li class="xui-pickitem" role="treeitem" tabindex="-1" >
//         <button type="button" class="xui-pickitem--body">
//           <span class="xui-pickitem--text">Delete</span>
//         </button>
//       </li>
//       <li class="xui-pickitem" role="treeitem" tabindex="-1" >
//         <button type="button" class="xui-pickitem--body">
//           <span class="xui-pickitem--text">Copy</span>
//         </button>
//       </li>
//     </ul>
//   </div>
// </div>
//
// Styleguide: Building Blocks.Dropdowns.10

// Showing and hiding
//
// Dropdowns are hidden by default.
// To toggle visiblity, add the following modifiers to `xui-dropdown-layout`.
//
// Classes:
// xui-dropdown-is-open: Makes dropdown visible
// xui-dropdown-is-opening: Animates dropdown into view at narrow viewports
// xui-dropdown-is-closing: Animates dropdown out of view at narrow viewports
//
// Styleguide: Building Blocks.Dropdowns.11

// Width
//
// By default, dropdowns have a min width and grow to match the width of their content.
// At narrow viewports, they fill the viewport width.
//
// Definitions:
// Default: 140px min-width: No class needed
//
// Styleguide: Building Blocks.Dropdowns.12

// Max width
//
// Tips:
// Do: Use max width classes if truncating or wrapping is desired
// Warning: Avoid applying max-width classes to search results as this causes variable widths between queries
//
// To set a max width, apply the following modifiers to `xui-dropdown-layout`.
//
// Definitions:
// Small: 140px max-width: `xui-dropdown-small`
// Medium: 220px max-width: `xui-dropdown-medium`
// Large: 300px max-width: `xui-dropdown-large`
// xlarge: 380px max-width: `xui-dropdown-xlarge`
//
// Styleguide: Building Blocks.Dropdowns.12.1

// Fixed width
//
// Tips:
// Do: Apply fixed width classes to search results as this provides constant widths between queries
//
// To set a fixed width, apply the following modifiers to `xui-dropdown-layout`.
//
// Definitions:
// Fixed Small: 140px width: `xui-dropdown-fixed-small`
// Fixed Medium: 220px width: `xui-dropdown-fixed-medium`
// Fixed Large: 300px width: `xui-dropdown-fixed-large`
// Fixed xLarge: 380px width: `xui-dropdown-fixed-xlarge`
//
// Styleguide: Building Blocks.Dropdowns.12.2

// Auto width
//
// ExampleClass: ds-example-verticallycentered
//
// Flag:
// React only
//
// If using React, an additional property is available that detects the width of the trigger and applies this to the dropdown programatically.
//
// Styleguide: Building Blocks.Dropdowns.12.3

// Positioning
//
// By default, dropdowns are positioned to the left and just below their trigger.
//
// Styleguide: Building Blocks.Dropdowns.14

// Custom positioning
//
// Tips:
// Do: Position dropdowns so that as much content is visible as possible
// Warning: Avoid changing positions once dropdowns are open
//
// To force a dropdown into a specific position relative to its trigger, add one the following modifiers to `xui-dropdown-layout`.
//
// Classes:
// xui-dropdown-positionright: Force right
// xui-dropdown-positionleft: Force left
// xui-dropdown-positionabove: Force up
// xui-dropdown-positionunder: Force below
//
// Styleguide: Building Blocks.Dropdowns.14.1

// Auto positioning
//
// Flag:
// React only
//
// If using React, positioning is handled automatically, and dropdowns are placed depending on where the most space is available when triggered.
//
// Styleguide: Building Blocks.Dropdowns.14.2

// Height
//
// By default, dropdown height matches that of its content. 
// However, at narrow vieports, a max-height is applied so that a section of the mask is always visible.
// Content scrolls internally if it exceeds this height.
//
// Definitions:
// Default: 80vh max-height: No class needed
//
// Styleguide: Building Blocks.Dropdowns.15

// Full height
//
// Tips:
// Do: Use full height dropdowns when a search field is present, to allow room for the software keyboard
// Warning: Always add a header to full height dropdowns so they are dismissable without selecting an option
//
// To force dropdowns to occupy the entire screen height at narrow viewports, apply the following modifier.
//
// Classes:
// xui-dropdown-fullheight: Apply to dropdown
//
// Styleguide: Building Blocks.Dropdowns.15.1

// Auto height
//
// Flag:
// React only
//
// If using React, dropdown height is calculated automatically based on the remaining space above or below the trigger.
// Content scrolls internally if it exceeds this height.
//
// Styleguide: Building Blocks.Dropdowns.15.2

// Headers and footers
//
// In some cases, a header or footer is required to provide context, or as a way to surface supplementary actions.
// To do this, use the following classes.
//
// Classes:
// xui-dropdown--header: Header container
// xui-dropdown--header-container: Header content
// xui-drodown--header-leftcontent: Header left content
// xui-drodown--header-rightcontent: Header right content
// xui-drodown--scrollable-content: Picklist container
// xui-drodown--footer: Footer container
//
// Markup:
// <div class='xui-dropdown-layout xui-dropdown-fullheight xui-dropdown-xlarge xui-dropdown-is-open'>
// <div class='xui-dropdown--mask'></div>
//   <div class='xui-dropdown--body'>
//     <div class="xui-dropdown--header-container">
//       <div class="xui-dropdown--header-leftcontent">
//         <div class="xui-heading-small xui-margin-left-small xui-text-truncated">
//           Add to group
//         </div>
//       </div>
//       <div class="xui-dropdown--header-rightcontent">
//         <div class="xui-margin-right-xsmall xui-dropdown--header-rightcontent">
//           <button class="xui-button xui-button-standard xui-button-small" tabindex="0" type="button">Cancel</button><button class="xui-button xui-margin-left-small xui-button-main xui-button-small" tabindex="0" type="button">Apply</button>
//         </div>
//       </div>
//     </div>
//     <div class='xui-dropdown--scrollable-content'>
//       <ul class="xui-picklist xui-picklist-layout" role="tree">
//         <li class="xui-pickitem" role="treeitem">
//          <label class="xui-pickitem--body xui-styledcheckboxradio">
//            <input type="checkbox" class="xui-styledcheckboxradio--input" tabindex="-1"/>
//            <svg focusable="false" class="xui-icon xui-pickitem--input">
//              <use role="presentation" class="xui-styledcheckboxradio--focus" xlink:href="#xui-icon-checkbox-main"></use>
//              <use role="presentation" class="xui-styledcheckboxradio--main" xlink:href="#xui-icon-checkbox-main"></use>
//              <use role="presentation" class="xui-styledcheckboxradio--check" xlink:href="#xui-icon-checkbox-check"></use>
//            </svg>
//            <span class="xui-pickitem--text xui-text-truncated xui-pickitem--multiselect-label xui-styledcheckboxradio--label">
//              Customers
//            </span>
//          </label>
//        </li>
//        <li class="xui-pickitem" role="treeitem">
//          <label class="xui-pickitem--body xui-styledcheckboxradio">
//            <input type="checkbox" class="xui-styledcheckboxradio--input" tabindex="-1"/>
//            <svg focusable="false" class="xui-icon xui-pickitem--input">
//              <use role="presentation" class="xui-styledcheckboxradio--focus" xlink:href="#xui-icon-checkbox-main"></use>
//              <use role="presentation" class="xui-styledcheckboxradio--main" xlink:href="#xui-icon-checkbox-main"></use>
//              <use role="presentation" class="xui-styledcheckboxradio--check" xlink:href="#xui-icon-checkbox-check"></use>
//            </svg>
//            <span class="xui-pickitem--text xui-text-truncated xui-pickitem--multiselect-label xui-styledcheckboxradio--label">
//              Suppliers
//            </span>
//          </label>
//        </li>
//        <li class="xui-pickitem" role="treeitem">
//          <label class="xui-pickitem--body xui-styledcheckboxradio">
//            <input type="checkbox" class="xui-styledcheckboxradio--input" tabindex="-1"/>
//            <svg focusable="false" class="xui-icon xui-pickitem--input">
//              <use role="presentation" class="xui-styledcheckboxradio--focus" xlink:href="#xui-icon-checkbox-main"></use>
//              <use role="presentation" class="xui-styledcheckboxradio--main" xlink:href="#xui-icon-checkbox-main"></use>
//              <use role="presentation" class="xui-styledcheckboxradio--check" xlink:href="#xui-icon-checkbox-check"></use>
//            </svg>
//            <span class="xui-pickitem--text xui-text-truncated xui-pickitem--multiselect-label xui-styledcheckboxradio--label">
//              Overseas clients
//            </span>
//          </label>
//        </li>
//       </ul>
//     </div>
//     <div class="xui-dropdown--footer">
//       <ul class="xui-picklist xui-picklist-layout" role="tree">
//         <li class="xui-pickitem" role="treeitem">
//           <svg focusable="false" class="xui-pickitem--icon xui-icon xui-icon-color-standard">
//             <use xlink:href="#xui-icon-plus" role="presentation"></use>
//           </svg>
//           <span class="xui-pickitem--body">
//             <span class="xui-pickitem--text">
//               New group
//             </span>
//           </span>
//         </li>
//       </ul>
//     </div>
//   </div>
// </div>
//
// Styleguide: Building Blocks.Dropdowns.16

// Accessibility
//
// Unless the trigger itself is an input, a dropdown should not open when its trigger is in focus.
// Rather, the enter and arrow keys should trigger visibility and shift focus to the dropdown itself.
// Similarly, the escape key closes it.
// Tapping anywhere on the screen (or the mask at narrow viewports) also dismisses the dropdown.
// Depending on the type of dropdown, selecting an item may or may not dismiss it, as in some cases multiple options may be selected.
// Refer to the [React implementation](https://github.dev.xero.com/pages/UXE/xui/docs/11.0.3/react/#dropdowns) when in doubt.
//
// Styleguide: Building Blocks.Dropdowns.30
