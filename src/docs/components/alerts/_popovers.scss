// Popover
//
// Components: Popover
//
// VisualExample: ./components/alerts/examples/popover/_popover-visual-example.html
//
// Teaser: To highlight features or provide supportive information without affecting the underlying page layout
//
// Introduction: Popovers draw attention to new features or provide supporting information without affecting the layout of a page.
//
// FigmaComponentFrameKey: 1425%3A13449
//
// Styleguide: Components.Alerts.Popover

// When to use
//
// - To provide a user with additional information without having to add it to the page
// - As part of onboarding to highlight or introduce new features on a page
//
// Styleguide: Components.Alerts.Popover.1

// When not to use
//
// - Don’t use popovers for information that’s crucial to a workflow – instead use a [hint message](./section-components-collectinginput-forms.html#components-collectinginput-forms-4-4)
// - Don’t use to display title/meta information  – instead use a [tooltip](./section-components-alerts-tooltip.html)
// - Don’t use to communicate error messages
//
// Styleguide: Components.Alerts.Popover.2

// Best practice
//
// Tips:
// Do: Content inside a popover must relate to its parent trigger
// Warning: Titles, subtitles, links, and action buttons are optional
//
// Styleguide: Components.Alerts.Popover.3

// Anatomy
//
// A popover consists of 3 parts: the header, body, and footer.
//
// A popover’s header is used to display a title, subtitle, and close button, The body contains the main content and the footer houses actions.
//
// Classes:
// xui-popover: Base popover class
// xui-popover-wrapper: Base popover class to provide padding
// xui-popover-arrow: Modifier to add default top left arrow
// xui-popover--header: Container for header content
// xui-popover--title-wrapper: Wrapping container for title element(s)
// xui-popover--title: Applies styling to title text
// xui-popover--subtitle: Applies styling to subtitle text
// xui-popover--body: Container for body content
// xui-popover--footer: Container for footer content
//
// Markup: ./examples/popover/_popover-anatomy.html
//
// Styleguide: Components.Alerts.Popover.4

// Positioning
//
// The position of a popover is important to complement the surrounding UI elements. If the popover’s preferred position causes it to go off-screen, then the popover should use the next available position.
//
// The React popover component automatically positions the arrow to be centred on its trigger as well as makes sure the popover never renders outside of the viewport. To specify a position for the arrow element in HTML/CSS, you can provide a `xui-popover-arrow*` modifier.
//
// Tips:
// Do: Position the popover so it complements other elements on the page
// Do: Make sure the popover doesn’t cover related content
//
// Classes:
// -topleft: Modifier for a top-left arrow
// -topcenter: Modifier for a top-center arrow
// -topright: Modifier for a top-right arrow
// -righttop: Modifier for a right-top arrow
// -rightcenter: Modifier for a right-center arrow
// -rightbottom: Modifier for a right-bottom arrow
// -bottomleft: Modifier for a bottom-left arrow
// -bottomcenter: Modifier for a bottom-center arrow
// -bottomright: Modifier for a bottom-right arrow
// -lefttop: Modifier for a left-top arrow
// -leftcenter: Modifier for a left-center arrow
// -leftbottom: Modifier for a left-bottom arrow
//
// Styleguide: Components.Alerts.Popover.4.1

// Features of a popover
//
// Explore the different features that can be applied to this component.
//
// Styleguide: Components.Alerts.Popover.5

// Onboarding popover
//
// A common use case for popovers is to be surfaced as a part of an onboarding process for introducing users to features on a page. Popovers can also be used to walk users through multiple steps (for example: a setup flow).
//
// Tips:
// Do: Use an onboarding popover to introduce a user to features or workflows
// Do: Display the number of steps as a subtitle in the header when using multiple popovers as part of a stepped process
//
// Styleguide: Components.Alerts.Popover.5.1

// Summoning and dismissing
//
// Onboarding popovers can be summoned either via an action or automatically when the page loads.
//
// Onboarding popovers should not be dismissed while interacting with other elements on the page. This is because content inside the popover may be relevant to completing a task. To dismiss an onboarding popover, a user must directly action this from inside the component.
//
// Tips:
// Do: Summon by clicking on the popover’s trigger
// Do: Summon on page load
// Do: Dismiss by clicking an action inside the popover
// Do: Always provide an action inside an onboarding popover to dismiss it
// Don't: Onboarding popovers shouldn’t be dismissable by clicking outside the popover or by moving keyboard focus to another element on the page
// Don't: Users who have previously dismissed a popover that was summoned on page load should not see the same popover when they visit the page again
//
// Classes:
// xui-u-hidden: Modifier to toggle popover visibility
//
// Markup: ./examples/popover/_popover-onboarding.html
//
// Styleguide: Components.Alerts.Popover.5.1.1

// Supporting information popover
//
// Another use case for popovers is to provide supportive information to elements on the page without having an impact on the underlying visual layout.
//
// Different to a [tooltip](./section-components-alerts-tooltip.html), which display title/meta information, popovers can contain richer content such as links and actions.
//
// Tips:
// Do: Use a supporting information popover to provide contextual details without impacting the page layout
//
// Styleguide: Components.Alerts.Popover.5.2

// Summoning and dismissing
//
// Unlike onboarding popovers, supportive information popovers should not stay open while the user interacts with other elements on the page.
//
// Tips:
// Do: Summon by clicking on the popover’s trigger
// Do: Dismiss by clicking on the popover’s trigger again
// Do: Dismiss by moving keyboard focus to another element on the page
// Do: Dismiss by clicking anywhere outside the popover
// Do: Dismiss by clicking an action inside the popover
//
// Classes:
// xui-u-hidden: Modifier to toggle popover visibility
//
// Markup: ./examples/popover/_popover-supporting-information.html
//
// Styleguide: Components.Alerts.Popover.5.2.1

// Responsive behaviour
//
// When the viewport is narrower than the width of the popover, the class `xui-popover-fullwidth` should be applied and the popover position should move (if not already) to above or below the trigger. This functionality is provided automatically with the React popover component.
//
// Classes:
// xui-popover-fullwidth: Sets the popover `border-radius` value to 0
//
// ExampleClass: ds-example-narrow ds-example-flush ds-example-transparent
//
// Markup: ./examples/popover/_popover-responsive.html
//
// Styleguide: Components.Alerts.Popover.5.3

// Size variants
//
// Popovers have 3 predefined size variants to cater for different amounts of content displayed inside the component.
//
// Tips:
// Do: Use size variant that is appropriate for the content inside the popover
//
// Definitions:
// Small: 200px wide: `xui-popover-small`
// Medium: 300px wide: `xui-popover-medium`
// Large: 400px wide: `xui-popover-large`
//
// Markup: ./examples/popover/_popover-size-variants.html
//
// Styleguide: Components.Alerts.Popover.6

// Accessibility
//
// Popovers must have an aria-describedby attribute that references the id of the popover body. Popovers with a header must also have an aria-labelledby attribute that references the id of the title. These attributes help assistive technologies to communicate the details of the popover.
//
// Popover triggers require an aria-owns attribute that references the id of the popover. This helps assistive technologies understand where the popover is on the page.
//
// Additionally, a dialog role must be applied to popovers. This helps assistive technologies provide context that the content is displayed in a sub-window on the page.
//
// Styleguide: Components.Alerts.Popover.8

// Content guidelines
//
// Tips:
// Do: Be concise: 1–3 sentences or a maximum of 3 lines
// Do: Body copy should be actionable – start sentences with a verb to state the action
// Do: Use sentence case (capitalise first word and proper nouns)
// Warning: Be cautious of asking a question in the heading as it can increase cognitive load
// Warning: Avoid starting body copy with 'you can'
// Don't: Text in the popover mustn’t be essential to completing a task
// Don't: Don’t use a full stop in headings, single sentences, or links
// Don't: The text in the UI shouldn’t be used as a heading. If a popover points to an element, a heading may not be needed.
//
// Related: Also see guidance for writing:
// * [Headings](https://xui.xero.com/product-language-guide/components/examples-of-product-writing/#headings)
// * [Links](https://xui.xero.com/product-language-guide/components/writing-style/#links)
//
// Styleguide: Components.Alerts.Popover.80

// Examples
//
// ExampleContentTable:
// Add employee bank details | Bank account and account name are required for direct payments
// Upgrade to a ‘Standard plan’ at any time to send more than 20 invoices | You can upgrade to a ‘Standard plan’ at any time to send more than 20 invoices
// Save time by using a template | Are you tired of asking the same questions?
//
// Styleguide: Components.Alerts.Popover.80.1

// Related components
//
// Related:
// * [Banner](./section-components-alerts-banner.html)
// * [Modal](./section-components-collectinginput-modals.html)
// * [Toast](./section-components-alerts-toast.html)
// * [Tooltip](./section-components-alerts-tooltip.html)
//
// Styleguide: Components.Alerts.Popover.99
