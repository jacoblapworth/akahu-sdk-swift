// Validation
//
// Introduction:
// Dealing with errors can be one of the worst experiences using software. It’s super important we handle the situation well.
// Do everything in your power to avoid required fields, be flexible about input requirements, and be clear about what users need to do.
//
// Teaser: Prevent and deal with errors
//
// flags: updated
//
// Styleguide: Components.CollectingInput.Forms.7

// Feedback on fields
//
// Add `xui-textinput-is-invalid`, or similar `-is-invalid` classname to controls to display their error state. For text input groups, if the problem is with a group, as a whole, add the class to all nested inputs. For Switches, adding `xui-switch-group-is-invalid` to the group wrapper will set the validity state for all children and messages. For Checkboxes and Radios, adding `xui-styledcheckboxradio-group-is-invalid` serves the same purpose.
//
// Always include a colour change, descriptive message, and an icon on the problematic input, so it’s still meaningful to people who can’t discern colour.
// * Position error text underneath the input
// * If there is no space below the input as it is in a group, position it at the bottom of the group in text form
// * If there is no space below the input, position it at the top of the input in a banner
// * If there is no space below the input, include an icon that can inherit focus that displays a tooltip with the full error message
//
// Tips:
// Do: Include the name of the field in the message
// Do: Add an explanation or example of correct input formats if something invalid is entered
// Do: Add the "status" aria role to inline validation messages
// Warning: Attempt to be flexible with the formats accepted rather than giving unnecessary errors
// Dont: Don't mark fields as invalid without an accompanying message
// Dont: Don't use vague error messages that don't suggest how to fix the problem
//
// exampleClass: ds-example-transparent ds-example-flush
//
// Markup: ./examples/form/_form-validation.html
//
// Styleguide: Components.CollectingInput.Forms.7.1

// When to validate
//
// Tips:
// Do: Validate when the user's focus leaves a field in an invalid state
// Do: Validate whether required fields are completed on submit
// Warning: Carefully consider whether it's helpful to warn the user that a field is required before submitting (they may decide to complete harder fields later)
// Dont: Don't validate fields on key press
//
// Styleguide: Components.CollectingInput.Forms.7.4

// Feedback in modals
//
// Identifying errors on submission of complex, non-linear documents can sometimes be tricky. Use a small modal dialog to provide feedback _and_ capture the information.
//
// exampleClass: ds-example-flush ds-example-transparent
//
// Markup: ./examples/form/_form-validation-modals.html
//
// Styleguide: Components.CollectingInput.Forms.7.2

// Other feedback options
//
// Tips:
// Do: Add an error message or banner at the top of a form with an "alert" aria role if a user submits a form with validation errors
// Dont: Avoid using banners with lists of errors that users must then hunt down
// Warning: Only prevent submission if fields are few and requirements very clear
//
// Styleguide: Components.CollectingInput.Forms.7.3

// Classes:
// xui-validation: Used to style text below inputs (to clarify format or provide supporting info)
// xui-validation-layout: Recommended layout for text below inputs
// xui-validation-is-invalid: Modifier for text below inputs that are in an error state
