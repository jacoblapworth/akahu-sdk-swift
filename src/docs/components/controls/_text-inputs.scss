// Text input
//
// Teaser: Standard and special purpose inputs for text and search
//
// Components: Text-Input
//
// VisualExample: ./components/controls/examples/text-input/_text-input-visual-example.html
//
// Introduction: A text input is a field where users can write or edit text
//
// FigmaComponentFrameKey: 1425%3A13441
//
// Styleguide: Components.Controls.TextInput

// When to use
//
// - Whenever a user needs to add text in the UI
//
// Styleguide: Components.Controls.TextInput.1

// Best practice
//
// Tips:
// Do: Always add a label above the input
// Warning: [Placeholder text](./section-components-collectinginput-forms.html#components-collectinginput-forms-4-6) should be used with caution
// Dont: Don’t place instructive text in the input – instead use a [hint message](./section-components-collectinginput-forms.html#components-collectinginput-forms-4-9)
//
// Styleguide: Components.Controls.TextInput.2

// Features of a text input
//
// Explore the different features that can be applied to this component.
//
// Styleguide: Components.Controls.TextInput.3

// Standard inputs
//
// Use the correct type attribute on inputs so soft-keyboards display the best options for the content. XUI normalises the display of input types so browser specific up/down arrows will not display.
//
// Tips:
// Warning: Inputs in XUI do not currently adjust font-size for small screens – this can trigger page zooming on focus in some mobile browsers
// Dont: Avoid using type="date" due to severe browser inconsistency. Use type="text" with an accessible label indicating the data type instead.
//
// Markup: ./examples/text-input/_text-input.html
//
// Styleguide: Components.Controls.TextInput.3.1

// Textarea
//
// The [text input component](./react/#text-input) can be set to **autogrow** within limits or a fixed height. It includes an
// optional character count — but be seriously sceptical about the need for one!
//
// Non-React implementations need `xui-u-resize-none` added if you want to prevent users resizing.
//
// Components: Textinput
//
// exampleClass: ds-example-inline
//
// Markup: ./examples/text-input/_text-input-textarea.html
//
// Styleguide: Components.Controls.TextInput.3.2

// Borderless text inputs
//
// Add `xui-input-borderless` to remove border from input and `xui-textinput-borderless-solid` to add grey tint.
//
// Tips:
// Do: Use for isolated secondary elements where a standard inputs are too prominent
// Warning: Full range of elements like selects are not yet supported
// Dont: Avoid using for linear forms or where validation is required
//
// exampleClass: ds-example-transparent ds-example-flush
//
// Markup: ./examples/text-input/_text-input-borderless.html
//
// Styleguide: Components.Controls.TextInput.3.3

// Transparent text inputs
//
// Add `xui-input-borderless` and `xui-input-borderless-transparent` for inputs which only have a background on focus.
//
// Tips:
// Warning: Only use where it’s clear that it’s still a field and what it’s for
// Do: Include an icon and placeholder
// Do: Ensure the input has an aria-label
// Dont: Avoid using if validation is required
//
// exampleClass: ds-example-flush
//
// Markup: ./examples/text-input/_text-input-transparent.html
//
// Styleguide: Components.Controls.TextInput.3.4

// Inverted inputs
//
// Both transparent and solid inputs can be used on dark backgrounds by adding `xui-inputwrapper-borderless-inverted`. Make sure your background color is dark enough!
//
// exampleClass: ds-example-dark
//
// Markup: ./examples/text-input/_text-input-inverted.html
//
// Styleguide: Components.Controls.TextInput.3.5

// Nesting
//
// Text inputs can have elements nested inside of them using side elements. It is important that the appropriate size variants of these elements are used within each Text input size variant.
//
// Tips:
// Do: Nest small elements inside medium sized Text inputs and xsmall elements inside small Text inputs
// Do: Nest icon buttons using the same size variant as the parent Text input
// Dont: Don't nest an element using the same size variant as its parent (with the exception of icon-buttons)
//
// Definitions:
// Size variant: **Elements available to nest**
// medium: Avatar, Button, Icon, Pill, Text
// small: Avatar, Button, Icon, Pill, Text
// xsmall: Avatar, Icon, Text
//
// Markup: ./examples/text-input/_text-input-nesting.html
//
// Styleguide: Components.Controls.TextInput.3.6

// Right-aligned content
//
// Adding the `xui-text-align-right` class to an ``<input>`` will align the text within the input to the right. This is particularly useful for aiding scannability of currency and figures.
//
// Tips:
// Do: Right align text within stacked inputs that hold numerical content
// Do: Leave the field label left aligned
// Do: Right align text-inputs if they are stacked, have right-aligned text and are different widths from one another
// Warning: Avoid using wide text-inputs with right aligned content, because the field's label and any left content (e.g icon) will be far away from right aligned text
// Warning: Avoid mixing and matching inputs with left and right aligned text, especially if they are stacked
// Dont: Don't use some inputs with actions to the right and some without, when they are stacked and each have right aligned text
//
// exampleClass: ds-example-narrow
//
// Markup: ./examples/text-input/_text-input-right-aligned.html
//
// Styleguide: Components.Controls.TextInput.3.7

// Character limit
//
// You can limit the maximum characters allowed on text inputs using the character counter.
//
// The counter can be:
// * initially hidden if it’s unlikely a user will exceed the character limit
// * visible to show a user the character limit before they start typing (e.g. notes section)
//
// Tips:
// Do: Use a clear validation message to reiterate the maximum character limit when it’s exceeded
// Do: Only make the character counter visible when the user approaches the limit, reducing the complexity
// Warning: If unsure of the space needed, choose the highest number of characters for the limit
// Dont: Don’t set a character limit without clear and valid reasons (e.g. preventing excessive input of characters)
//
// Styleguide: Components.Controls.TextInput.3.8

// Soft-limit vs hard-limit
//
// Use a soft-limit for text inputs. It allows users to go beyond the character limit, but informs them through the character counter and a validation message. This prevents user errors, such as incomplete copy-pasting or exceeding the limit during typing without looking at the screen.
//
// The problem with hard-limits (e.g. HTML input attribute: `maxlength`) is users can’t enter any characters that exceed the limit, so it’s not possible to validate and alert users of an input error. We don’t recommend using them.
//
// Styleguide: Components.Controls.TextInput.3.8.1

// Visibility of character counters
//
// Character limits don't always have to be visible. The use of a character counter should be minimised because unnecessary use of them can distract users with visual noise.
//
//
// Styleguide: Components.Controls.TextInput.3.8.2

// Visible when invalid
//
// Callout:
//
// If a maximum character limit is used to prevent excessive input of characters, and the user is unlikely to exceed the limit, display the character count only when the limit is exceeded or close to being exceeded.
//
// Markup: ./examples/text-input/_text-input-character-limit-on-invalid.html
//
// Styleguide: Components.Controls.TextInput.3.8.2.1

// Always visible
//
// Callout:
//
// If the number of characters entered by a user is likely to exceed the character limit, always show the character counter so they know the character limit in advance.
//
// Markup: ./examples/text-input/_text-input-character-limit-always.html
//
// Styleguide: Components.Controls.TextInput.3.8.2.2

// Adding icons
//
// Depending on the position, icons in a text input can indicate different things. Icons on the left show content prompts, whereas icons on the right indicate actions.
//
// Styleguide: Components.Controls.TextInput.3.9

// Content prompts
//
// Tips:
// Do: Add to the left only
// Do: Use either XUI icon or text
// Do: Can be used instead of a label if content easily understood
// Warning: Ensure the input has an aria-label if not including a label
//
// exampleclass: ds-example-narrow
//
// Markup: ./examples/text-input/_text-input-content-prompts.html
//
// Styleguide: Components.Controls.TextInput.3.9.1

// Indicating actions
//
// Icons on the **right** are used to indicate actions. These can be either the main input behaviour (eg. a caret for a dropdown) or supplementary actions like clearing or picking a date.
//
// exampleclass: ds-example-narrow
//
// Markup: ./examples/text-input/_text-input-actions.html
//
// Styleguide: Components.Controls.TextInput.3.9.2

// Size variants
//
// Inputs offer a range of size variants to enable greater control over visual hierarchy and [interface density](./section-fundamentals-spacing.html#fundamentals-spacing-2).
//
// Tips:
// Do: Default to 'medium' size variant
// Do: Nest 'small' text-inputs inside 'medium' sized elements and 'xsmall' text-inputs inside 'small' elements
// Do: Use the same label and description font-size with all size variants
// Warning: Use 'small' and 'xsmall' variants cautiously, as they have reduced legibility and touch targets
// Dont: Don’t use a combination of size variants within a single form
// Dont: Don't vertically stack small and xsmall Text inputs. Small and xsmall variants now have a sunsetting flag due to poor touch interaction potential.
//
// Definitions:
// Size variant: **Height**: **Class**
// medium: 40px: `xui-textinput--input-medium`
// small: 32px: `xui-textinput--input-small`
// xsmall: 24px: `xui-textinput--input-xsmall`
//
// Markup: ./examples/text-input/_text-input-sizes.html
//
// Styleguide: Components.Controls.TextInput.4

// Accessibility
//
// Styleguide: Components.Controls.TextInput.5

// Focus state
//
// For text input components created with React, focus states will be automatically applied; however for text inputs created with HTML, you will need to implement focus styling yourself.
//
// In order to enable focus styling for these inputs, you should apply the `xui-textinput-focus` class to the top-level element (the element with the `xui-textinput` class) when the input is focused.
//
// An example of how to implement this behaviour is shown below.
//
// exampleclass: ds-example-narrow
//
// Markup: ./examples/text-input/_text-input-focus-accessibility.html
//
// Styleguide: Components.Controls.TextInput.5.1

// Content guidelines
//
// Tips:
// Do: Be short and succinct
// Do: Avoid using unnecessary words such as a, an, the (for example: use 'Add task' not 'Add a task')
// Do: Use sentence case (capitalise first word and proper nouns)
//
// Also see guidance for writing:
// Related:
// - [Labels](./section-components-collectinginput-forms.html#components-collectinginput-forms-4-2)
// - [Placeholder text](./section-components-collectinginput-forms.html#components-collectinginput-forms-4-3)
// - [Hint message](./section-components-collectinginput-forms.html#components-collectinginput-forms-4-4)
// - [Validation message](./section-components-collectinginput-forms.html#components-collectinginput-forms-4-6)
// - [Optional/required fields](./section-components-collectinginput-forms.html#components-collectinginput-forms-4-7)
//
//  Styleguide: Components.Controls.TextInput.6

// Class list
//
// Currently the `xui-textinput` CSS classes are highly optimised for usage with the `XUITextInput` React component.
//
// Classes:
// xui-textinput: Should be applied to the top-level element, whether that is the input or the wrapping div
// xui-textinput-focus: Should be applied to the top-level element when the input is focused
// xui-textinput-is-disabled: Adds disabled styling
// xui-textinput--input: Applies input styling
// xui-textinput--sideelement: Adds side element wrapper styling
// xui-textinput--sideelement-icon: Adds padding for icon side elements
// xui-textinput--sideelement-text: Adds padding for text side elements
// xui-textinput--sideelement-avatar: Adds padding for avatar side elements
// xui-textinput--sideelement-button: Adds padding for button side elements
// xui-textinput--sideelement-has-background: Adds margins for icons with a background
// xui-textinput--sideelement-align-top: Vertically aligns content of the side element to the top
// xui-textinput--sideelement-align-center: Vertically aligns content of the side element to the center
// xui-textinput--sideelement-align-bottom: Vertically aligns content of the side element to the bottom
// xui-textinput-borderless: Makes the input borderless
// xui-textinput-borderless-transparent: Makes the input borderless and transparent when unfocused
// xui-textinput-borderless-solid: Makes the input borderless with a light background
// xui-textinput-borderless-inverted: Adds borderless styling for using on an inverted background
// xui-textinput-medium: Sets textinput wrapper size to medium
// xui-textinput-small: Sets textinput wrapper size to small
// xui-textinput-xsmall: Sets textinput wrapper size to xsmall
// xui-textinput--input-medium: Sets textinput size to medium
// xui-textinput--input-small: Sets textinput size to small
// xui-textinput--input-xsmall: Sets textinput size to xsmall
//
// Styleguide: Components.Controls.TextInput.7

// Related components
//
// Related:
// * [Autocompleter](./section-components-collectinginput-autocompleter.html)
// * [Form](./section-components-collectinginput-forms.html)
// * [Select](./section-components-controls-select.html)
//
// Styleguide: Components.Controls.TextInput.99
