// Editable table
//
// Components: Editable-table
//
// VisualExample: ./components/displaying-data/examples/editable-table/_editable-table-visual-example.html
//
// Teaser: A grid of rows and columns used to display interactive and static data.
//
// Introduction: Editable tables are used to display interactive or a combination of interactive and static data so it’s easy to scan, organise, and manipulate.
//
// FigmaComponentFrameKey: 4955%3A18472
//
// Styleguide: Components.DisplayingData.EditableTable

// When to use
//
// - For displaying interactive or a combination of interactive and static data
// - For organising large sets of data into rows and columns
//
//  Styleguide: Components.DisplayingData.EditableTable.1

// When not to use
//
// - Don’t use to display solely static data – instead consider a [table](./section-components-displayingdata-table.html)
//
// Styleguide: Components.DisplayingData.EditableTable.2

// Anatomy
//
// The editable table is a container that houses data organised into rows and columns. The tabular data is labeled by cells in a header row situated at the top of the container. The minimum technical requirement for a table is a single cell, however, a table is best used to compare values in large datasets.
//
// Classes:
// xui-editabletablewrapper: Sets base table container styling
// xui-editabletablewrapper--scrollcontainer: Sets styling and scrolling behaviour
// xui-editabletable: Sets table cell border styling
// xui-editabletablehead: Sets table header styling
// xui-editabletablebody: Sets table body styling
// xui-editabletablerow: Sets table row styling
// xui-editabletablecell: Sets table cell styling
// xui-editabletablewrapper--border: Sets wrapping border style
//
// Styleguide: Components.DisplayingData.EditableTable.3

// Header
//
// The header is used to house labels that describe the subsequent data points in the columns of your table.
//
// Classes:
// xui-editabletablehead: Sets table header styling
// xui-editabletableheadingcell: Sets table header cell styling
// xui-editabletableheadingcell-leftaligned: Aligns text left
// xui-editabletableheadingcell-rightaligned: Aligns text right
//
// Tips:
// Do: Provide a header to help users navigate data points in a table
// Do: Ensure label copy is descriptive of the data in its associated column
// Do: Ensure label copy is concise to help with scanning across multiple columns
// Do: Align numbers, including currency to the right
//
// Markup: ./examples/editable-table/_editable-table-header.html
//
// Styleguide: Components.DisplayingData.EditableTable.3.1

// Columns
//
// Columns in a table are used to section your dataset into categorised groups. This helps users navigate through a dataset easily and find information quickly.
//
// Tips:
// Do: Use a column to categorise a single chunk of data (eg “Due date”), so that users can easily find the information they need within a table
// Do: House the most pertinent data of your dataset in the first column (eg Invoice item description)
// Do: Order columns from left to right in the order you would expect users to read information in a row, as people commonly navigate through a table from left to right
// Don't: Don’t combine multiple categories of data into one column (eg “Date created • Date Due”)
//
// Styleguide: Components.DisplayingData.EditableTable.3.2

// Column widths
//
// Callout:
//
// Content columns in a table will default to being equal width, but can be set to percentage widths, explicit widths (pixels, ems, etc), or “auto” which is different from a non-specified value. Widths can be set using the available `columnWidths` API or by specifying a width on the first cell in each column (often the header row).
//
// ExampleClass: ds-example-transparent ds-example-flush
//
// Markup: ./examples/editable-table/_editable-table-columns.html
//
// Tips:
// Do: Provide a column width that is appropriate for the expected content in the relevant cells.
// Do: Provide an auto or non-specified “flexible” width for when you want to grow a column to fill available empty table space.
// Don't: Avoid using flexible width options for tables that are expected to horizontally overflow their container as the columns will attempt to compress the column content. Instead specify the width of these columns with an explicit or percentage value.
//
// Styleguide: Components.DisplayingData.EditableTable.3.2.1

// Showing and hiding columns
//
// Callout:
//
// Depending on the workflow, it may not be necessary for all columns to be visible at all times. To facilitate this, give users the option to show and hide columns.
//
// This can be done two ways:
// - By conditionally rendering the hidden cells
// - By using the `hiddenColumns` property of `XUIEditableTable` which is designed for performance with very large datasets
//
// The mechanism by which Xero users will show and hide columns is not defined via the editable table component as the desired experience will likely vary depending on the product experience.
//
// Tips:
// Do: Provide the ability to hide and show columns to focus the user on the most important parts of the dataset for their relevant workflow
// Do: Use an appropriate control for your experience, based on design aspects such as visual hierarchy, prevalence of the interaction within the workflow, and the placement of the control with other elements on the page
// Do: Use the `hiddenColumns` property when the dataset is large but consistently structured, and users may wish to hide and show content repeatedly
// Do: All other cases should conditionally render hidden cells. For example, when you plan to save the user’s preferences for future page loads, and columns may not need to be rendered at all
//
// Styleguide: Components.DisplayingData.EditableTable.3.2.2

// Pinned columns
//
// Callout:
//
// In tables that have content that horizontally scrolls, there may be columns that you wish to have visible at all times to help provide context to other data in the table, eg a drag handle or overflow menu. First and last columns in the editable table can be pinned by toggling the `hasPinnedFirstColumn` and `hasPinnedLastColumn` properties.
//
// Classes:
// xui-editabletable-pinfirst: Applied to the table to pin the first column
// xui-editabletable-pinlast: Applied to the table to pin the last column
// xui-editabletableoverflow-pinoverflowleft: Applied to the editable table wrapper to provide overflow styling when the left column is pinned
// xui-editabletableoverflow-pinoverflowright: Applied to the editable table wrapper to provide overflow styling when the right column is pinned
//
// Tips:
// Do: Pin columns that help provide context to other column data as the user scrolls horizontally
// Warning: Pinned columns should be narrow as to avoid covering other data in the table
//
// Styleguide: Components.DisplayingData.EditableTable.3.2.3

// Rows
//
// Rows in a table are used to represent individual line items in a dataset. Rows can contain data of any kind, but also could house interactive controls, for example, for editing cell data, navigating, or triggering actions relating to the item.
//
// Tips:
// Do: Use a row to represent a single entity in a dataset as users are familiar with perceiving a row to represent 1 item (eg an invoice line item or a staff member)
//
// Classes:
// xui-editabletablerow: Sets table row styling
//
// Styleguide: Components.DisplayingData.EditableTable.3.3

// Cells
//
// The editable table component can house all types of information and data, but provides some out-of-the-box cell types for common interactions.
//
// Tips:
// Do: Keep cell copy concise to ensure an easy-to-scan reading experience
// Do: Provide cell types that are appropriate for the data inside the cell (eg use a select cell for choosing an item from a small list)
// Warning: Use caution when using interactive cell components in an HTML + CSS implementation of the editable table as cell focus states are displayed via javascript
//
// Styleguide: Components.DisplayingData.EditableTable.3.4

// Read-only cells
//
// Callout:
//
// Read-only cells are used for presentational data that is not going to be changed by the user, for example a pre-populated contact name. Read-only cells in the editable table component are styled similarly to text input cells in order to create a cohesive visual experience, however, they do not have interactive qualities such as hover/focus states or cursor changes to help communicate that the cell content cannot be manipulated.
//
// Classes:
// xui-editabletablecellreadonly: Sets cell padding
// xui-editabletablecell-leftaligned: Aligns text left
// xui-editabletablecell-rightaligned: Aligns text right
//
// Tips:
// Do: If a table is only using read-only cells for its data points, consider using XUI’s [table component](section-components-displayingdata-table.html).
// Do: Read-only cells should contain data that is clearly static (eg a timestamp) to avoid the user attempting to interact with the cell.
// Do: Align numbers, including currency to the right
// Warning: Use caution when combining both interactive and read-only cells in a table as they are styled similarly and could cause confusion to the user of what information is and is not editable. Provide clear header labels to help describe which data is editable or static.
//
// ExampleClass: ds-example-transparent ds-example-flush
//
// Markup: ./examples/editable-table/_editable-table-cell-readonly.html
//
// Styleguide: Components.DisplayingData.EditableTable.3.4.1

// Text input cells
//
// Callout:
//
// Text input cells are used for displaying and modifying text content. Text input cells house a variant of XUI’s [text input component](section-components-controls-textinput.html), enabling a consistent text manipulation experience and the ability to consume the same properties.
//
// If content inside the text input cell is longer than its cell-width, by default the content will overflow horizontally, following the same pattern as the text input component. A multiline variant is available, however, to allow for text to wrap onto a new line.
//
// Classes:
// xui-editabletablecelltextinput: Sets cursor styling
// xui-editabletablecelltextinput--control: Sets cell styling
// xui-textinput-cell: Sets cell styling
// xui-textinput--input-reverse-align: aligns input text right
//
// Tips:
// Do: When cell data is imperative for completing a workflow, use the multiline variant to wrap text content (eg for contact names in a list of contacts), otherwise, ensure the width of the column allows sufficient data entry
// Do: Use left and right side-elements to provide additional visual components into the text input cell
//
// ExampleClass: ds-example-transparent ds-example-flush
//
// Note:
// Some of the functionality in the example below is missing due to it being generated in HTML and CSS. To see the full component experience, visit the <a href="./react/#editable-table">React documentation</a>.
//
// Markup: ./examples/editable-table/_editable-table-cell-textinput.html
//
// Styleguide: Components.DisplayingData.EditableTable.3.4.2

// Select box cells
//
// Callout:
//
// Flags: updatesComing
//
// Select box cells are used to trigger a dropdown that contains a list of options. These options can be selected, which can then be represented by replacing the text content inside the cell container (this has to be hooked up manually upon implementation of the select box cell for your particular data). Select box cells house a variant of XUI’s [select box component](section-components-controls-select.html).
//
// Classes:
// xui-editabletablecellselectbox: Sets cell styling
// xui-editabletablecellselectbox--control: Sets cell styling
// xui-select-cell: Sets cell styling
//
// Tips:
// Do: Use when a user needs to select one or more options from a small list, and a dropdown caret
// Don't: Avoid using when there’s a large number of options in a dropdown, as it’s frustrating to scroll to find an option. Instead, use [autocompleter cells](#components-displayingdata-editabletable-3-4-4) or [autocompleter secondary search cells](#components-displayingdata-editabletable-3-4-5) so the user can search.
//
// ExampleClass: ds-example-transparent ds-example-flush
//
// Note:
// Some of the functionality in the example below is missing due to it being generated in HTML and CSS. To see the full component experience, visit the <a href="./react/#editable-table">React documentation</a>.
//
// Markup: ./examples/editable-table/_editable-table-cell-selectbox.html
//
// Styleguide: Components.DisplayingData.EditableTable.3.4.3

// Autocompleter cells
//
// Callout:
//
// Flags: updated updatesComing
//
// Autocompleter cells are used to search and select items from a list in a dropdown. These lists could contain any number of items as the search functionality refines the list when characters are entered into the cell. Autocompleter cells house a variant of XUI’s [autocompleter component](section-components-collectinginput-autocompleter.html).
//
// Classes:
// xui-editabletablecellautocompleter: Sets cell styling
// xui-editabletablecellautocompleter--control: Sets cell styling
// xui-editabletablecellautocompleter--trigger: Sets cell styling
//
// Tips:
// Do: Use when you’d like a user to directly type in the field to select one or more options from a large list
// Do: Use when you’d like a user to get a result quicker (compared to [autocompleter secondary search cells](#components-displayingdata-editabletable-3-4-5))
// Do: Provide smart suggestions or recent items in the dropdown when a cell is selected and a user hasn’t entered any characters. This gives a user a quick way to populate cell content.
// Don't: Avoid using when there is a small number of options in a dropdown as a search field is unnecessary. Instead, use [select box cells](#components-displayingdata-editabletable-3-4-3).
// Don't: Avoid using when the cell is too narrow for users to type search terms. Instead, use [autocompleter secondary search cells](#components-displayingdata-editabletable-3-4-5).
//
// ExampleClass: ds-example-transparent ds-example-flush
//
// Note:
// Some of the functionality in the example below is missing due to it being generated in HTML and CSS. To see the full component experience, visit the <a href="./react/#editable-table">React documentation</a>.
//
// Markup: ./examples/editable-table/_editable-table-cell-autocompleter.html
//
// Styleguide: Components.DisplayingData.EditableTable.3.4.4

// Autocompleter secondary search cells
//
// Callout:
//
// Flags: updated updatesComing
//
// Autocompleter secondary search cells are used to trigger a dropdown that contains a search field and a list of options.
//
// These options can be selected, which then replaces the placeholder text  inside the cell container. This has to be hooked up manually upon implementation of the autocompleter secondary search for your particular data.
//
// Autocompleter secondary search cells is a variant of XUI’s [secondary search autocompleter component](section-components-collectinginput-autocompleter.html#components-collectinginput-autocompleter-5) but with the trigger built-in.
//
// Classes:
// xui-editabletablecellsecondarysearch: Sets cell styling
// xui-editabletablecellsecondarysearch--control: Sets cell styling
// xui-editabletablecellsecondarysearch--trigger: Sets cell styling
//
// Tips:
// Do: Use when a user needs to select a single option from a large list
// Do: Use to trigger a search field to give users extra space to type in
// Do: Provide smart suggestions or recent items in the dropdown when a cell is selected and a user hasn’t entered any characters. This gives a user a quick way to populate cell content.
// Don't: Avoid using when there is a small number of options in a dropdown as a search field is unnecessary. Instead, use [select box cells](#components-displayingdata-editabletable-3-4-3).
//
// ExampleClass: ds-example-transparent ds-example-flush
//
// Note:
// Some of the functionality in the example below is missing due to it being generated in HTML and CSS. To see the full component experience, visit the <a href="./react/#editable-table">React documentation</a>.
//
// Markup: ./examples/editable-table/_editable-table-cell-secondarysearch.html
//
// Styleguide: Components.DisplayingData.EditableTable.3.4.5

// Icon button cells
//
// Callout:
//
// Icon button cells are used to provide a single action in a cell that is easily accessible and quick to recognise via the [icon](section-fundamentals-icons.html#fundamentals-icons-7) used inside. Icon button cells house a variant of XUI’s [icon button component](section-components-controls-button.html#components-controls-button-6).
//
// Classes:
// xui-editabletablecelliconbutton: Sets cell styling
//
// Tips:
// Do: Use a `-medium` size variant for icon buttons inside of icon button cells to provide an adequate touch-target size
// Don't: Don’t provide a header label for icon button columns if it does not provide additional supportive context
//
// ExampleClass: ds-example-transparent ds-example-flush
//
// Markup: ./examples/editable-table/_editable-table-cell-iconbutton.html
//
// Styleguide: Components.DisplayingData.EditableTable.3.4.6

// Custom cell content
//
// Callout:
//
// While the editable table component provides cell options of-of-the-box for common controls, it is still possible to insert other components within cells. Examples of custom cell content could be inserting components like pills, tags or avatars. When using custom cell content, ensure the experience provided is accessible and responsive.
//
// Classes:
// xui-editabletablecell-withpadding: Adds horizontal cell padding to align content to header label
//
// Tips:
// Do: Ensure users can easily scan custom content inside and across multiple cells
// Do: Ensure custom cell content does not break in responsive viewports
// Do: Horizontally align cell content to the header label
// Do: Provide vertical padding that's appropriate for the content in the cell
// Do: Provide an accessible user experience when adding custom cell content
// Do: Consider the keyboard experience, including tab-order when adding custom cell content
// Do: Provide an appropriate cursor style for hover, active, and focus states when adding custom cell content
//
// ExampleClass: ds-example-transparent ds-example-flush
//
// Markup: ./examples/editable-table/_editable-table-cell-customcontent.html
//
// Styleguide: Components.DisplayingData.EditableTable.3.4.7

// Features of an editable table
//
// Explore the different features that can be applied to this component.
//
// Many of these features rely on the [React component](./react/#editable-table) implementation, so the examples below may not accurately represent the end user experience.
//
// Styleguide: Components.DisplayingData.EditableTable.4

// Disabled
//
// Cells in the editable table component can be "disabled" using the available properties or classes. Disabling disallows user interaction of the content inside a cell. Disabling content gives an impression to the user that the content can somehow be enabled again in the future. If content cannot ever be interacted with, consider using a [read-only cell](#components-displayingdata-editabletable-3-4-1) instead.
//
// Tips:
// Do: Disable a single cell when the internal input or other interaction(s) are intended to be blocked
// Do: Disable all interactive elements within a "disabled" table cell
// Don't: Use disabled states to display-read only data that would never be interactive
//
// Classes:
// xui-editabletablecell-control-is-disabled: Sets disabled cell styling
// xui-button-is-disabled: Disables interaction of button component
// xui-textinput-is-disabled: Disables interaction of text input component
//
// ExampleClass: ds-example-transparent ds-example-flush
//
// Markup: ./examples/editable-table/_editable-table-disabling.html
//
// Styleguide: Components.DisplayingData.EditableTable.4.1

// Validation
//
// Validating table data is notoriously tricky due to the confined spacing in a cell, and the amount of data that can be presented in a table. XUI provides an `isInvalid` property for each of the supplied editable table cell components which applies the appropriate error validation styling, as well as a `validationMessage` property to describe the error associated with the cell. Additionally, the main table container component has an `isInvalid` property to apply an extra level of validation styling affordance with a `validationMessage` property to describe the error within the context of a workflow.
//
// Tips:
// Do: Cell validation messages should be brief and concise, focussed on fixing the specific issue within the associated cell (eg “Invalid currency amount”)
// Do: Table container validation message should describe an error in the context of a workflow (eg “Some table data entered is invalid, please fix these entries to send invoice”)
// Do: If possible, use the table container validation message to guide the user to find where an error in the table is, so that they can navigate to the invalid cell and fix the error quickly (eg “‘Sarah Holloway’ has no salary amount entered. All employees must have a salary amount to submit document”)
// Do: If a table has multiple cells with errors, make sure to say so in the table container validation message
//
// Classes:
// xui-editabletablewrapper--border: Sets wrapping border style
// xui-editabletablewrapper--border-is-invalid: Applies red table border
//
// Note:
// Some of the functionality in the example below is missing due to it being generated in HTML and CSS. To see the full component experience, visit the <a href="./react/#editable-table">React documentation</a>.
//
// ExampleClass: ds-example-transparent ds-example-flush
//
// Markup: ./examples/editable-table/_editable-table-validation.html
//
// Styleguide: Components.DisplayingData.EditableTable.4.2

// Adding and removing rows
//
// Styleguide: Components.DisplayingData.EditableTable.4.3

// Adding new rows - manual
//
// Adding a new row is a function sometimes needed for tables that change based on user-entry. Use the visual styling provided via the properties in the `XUIEditableTable` component to give users a consistent experience between products.
//
// Classes:
// xui-editabletablefoot: Sets footer styling
// xui-editabletablerow-footer: Styles the footer as a regular row without actions
// xui-editabletableutilitybar: Base class
// xui-editabletableutilitybar--cell: Sets cell styling
// xui-editabletableutilitybar--cell--wrapper: Sets cell styling
//
// Tips:
// Do: Place button for adding a new row at the bottom-left of a table, as user testing has shown that is the expected location of the interaction
// Do: Follow the [interactive example in our React documentation](./react/#editable-table) to provide a consistent experience for displaying and interacting with the "add new row" pattern
// Warning: For tables with a large number of line items, consider displaying the "add row" action outside of the table, to allow for a more accessible experience without requiring the user to scroll down a great deal
//
// Note:
// Some of the functionality in the example below is missing due to it being generated in HTML and CSS. To see the full component experience, visit the <a href="./react/#editable-table">React documentation</a>.
//
// Markup: ./examples/editable-table/_editable-table-addrow-manual.html
//
// Styleguide: Components.DisplayingData.EditableTable.4.3.1

// Adding new rows - automatic
//
// When data entry is a key workflow (eg entering multiple line items sequentially on an invoice), providing an automatic "add new row" pattern may be a helpful tool to keep users within their workflow, rather than having to switch between data entry and adding new rows.
//
// The automatic "add new row" pattern works by displaying a "ghost" row at the bottom of the table which changes into a regular row once data has been entered into any of its cells. The "ghost" row is then shifted down, so there is always an empty row for the user to enter new data into.
//
// Tips:
// Do: Use automatic "add new row" pattern when data entry is a key workflow in the editable table component
// Do: Follow the [interactive example in our React documentation](./react/#editable-table) to provide a consistent experience for automatically generating new rows as the user enters in data
//
// Note:
// Some of the functionality in the example below is missing due to it being generated in HTML and CSS. To see the full component experience, visit the <a href="./react/#editable-table">React documentation</a>.
//
// Markup: ./examples/editable-table/_editable-table-addrow-automatic.html
//
// Styleguide: Components.DisplayingData.EditableTable.4.3.2

// Removing rows
//
// Removing a row is a function sometimes needed for tables that change based on user-entry. Like adding a row, the `XUIEditableTable` component provides an out-of-the-box experience for deleting rows. This pattern appends an end column to the table, with the column cells containing a trash icon button, which can then be used to trigger a row removal function.
//
// Tips:
// Do: Use a trash icon to indicate removing/deleting a row as users are familiar with the meaning of this icon
// Do: When line items have multiple associated actions, supply an overflow icon button with "Remove row" or similar as a pickitem in a dropdown
//
// Markup: ./examples/editable-table/_editable-table-removerow.html
//
// Styleguide: Components.DisplayingData.EditableTable.4.3.3

// Sorting data
//
// Styleguide: Components.DisplayingData.EditableTable.4.4

// Drag and drop (reordering rows)
//
// To provide a natural reordering experience, the editable table component has a feature for applying a "drag to reorder rows" pattern, including styling of the various states before, during, and after dragging and dropping a row. This experience relies on a [React implementation](./react/#editable-table) of the component.
//
// Tips:
// Do: Provide the "drag to reorder" interaction to provide users with a way to rearrange the order of their line items
// Do: Provide the "drag to reorder" interaction for tables with a small number of rows as the interaction is optimised for rearranging a single item at a time
// Do: Ensure rearranging interaction can be achieved via keyboard input only
// Do: Provide adequate messages for screenreader technologies to describe drag and drop interactions
//
// Classes:
// xui-editabletablerow--draghandle: Sets cursor style to `drag`
//
// Markup: ./examples/editable-table/_editable-table-draganddrop.html
//
// Note:
// Some of the functionality in the example below is missing due to it being generated in HTML and CSS. To see the full component experience, visit the <a href="./react/#editable-table">React documentation</a>.
//
// Styleguide: Components.DisplayingData.EditableTable.4.4.1

// Sorting rows by columns
//
// The editable table component supports sorting rows by columns. Visit the <a href="./react/#editable-table">React documentation</a> for an example.
//
// Styleguide: Components.DisplayingData.EditableTable.4.4.2

// Responsive treatment
//
// The editable table component provides a horizontal overflowing pattern for when the table content extends outside of the available space in its parent container. Additional to the scroll-bar, a gradient is displayed on either side of the table container to provide an indication that there is obscured content. The conditional hiding/showing of the overflow gradient relies on a [React implementation](./react/#editable-table) of the component.
//
// Tips:
// Do: Use an appropriate width for each of the table columns to optimise the available screen real estate
// Do: Provide an appropriate `minWidth` and `maxWidth` value to the editable table component to ensure the expected experience occurs as the parent container size changes width
// Do: Ensure the table component width fits inside its parent container, to avoid horizontally clipping data unintentionally
// Do: If there is not enough space to see all table data in a row within a container, use the prescribed responsive pattern to horizontally overflow content
// Do: Conditionally hide/show overflow gradients when table content is scrolled to the start/end of the container
// Do: In narrow containers/viewports, adaptively change the layout of data represented in a table if it makes the user experience faster and more intuitive, eg swapping to use a number of stacked text inputs
// Do: Consider wrapping content in columns that expect large amounts of text to provide more space for other columns in the table
// Don't: Avoid truncating text as it obscures the data and can misinform users within their workflow when referencing data
//
// Classes:
// xui-editabletableoverflow: Overflow base styling
// xui-editabletableoverflow-overflowleft: Displays overflow gradient (left)
// xui-editabletableoverflow-overflowright: Displays overflow gradient (right)
//
// Markup: ./examples/editable-table/_editable-table-responsive.html
//
// Note:
// Some of the functionality in the example below is missing due to it being generated in HTML and CSS. To see the full component experience, visit the <a href="./react/#editable-table">React documentation</a>.//
//
// Styleguide: Components.DisplayingData.EditableTable.4.5

// Future editable table features
//
// We have identified a few additional features to be investigated and potentially added to the editable table component in the future. If you have any questions about these or other features, please contact the XUI team.
//
// Definitions:
// Column sorting via header action:               Likely to follow existing XUI pattern/precendent
// Bulk selection:		                           Likely to follow existing XUI pattern/precendent
// Frozen columns:                                 Needs design & development investigation
// Mobile enhancements:                            Needs design & development investigation
// Additional item hierarchy:                      Needs design & development investigation. Specifically related to sub-groupings
// Table style variations:                         Needs design & development investigation. Specifically desired for static presentational table data
// Information/display density:                    Needs design & development investigation. Relies on some wider density pattern work
//
// Styleguide: Components.DisplayingData.EditableTable.4.6

// Accessibility
//
// Editable Table is designed to leverage the best of HTML tables, for accessibility purposes. However, product teams can help support optimal access for users in a few additional ways.
//
// Styleguide: Components.DisplayingData.EditableTable.5

// Information architecture
//
// Each table heading should have a `scope` attribute that specifies whether it pertains to a column, group of columns, row, or group of rows. “Col” is the default value, when using the `XUIEditableTableHeadingCell` React component.
//
// Additionally, tables can receive an ARIA label, which helps provide more context to assistive technology, such as screen readers. A “caption” element is equally accessible, but will display on the page, unless styled not to do so.
//
// Styleguide: Components.DisplayingData.EditableTable.5.1

// Keyboard experience
//
// The editable table uses standard HTML table keyboard navigation, rather than a “grid” interaction. For the interactive elements within an editable table, this means they can be focused with tab navigation typical to other forms.
//
// Tips:
// Do: Ensure users cannot get trapped within a table cell, row, or container when relying on keyboard for navigation
//
// Styleguide: Components.DisplayingData.EditableTable.5.2

// Content guidelines
//
// Tips:
// Do: Headers should be short and succinct (1–3 words)
// Do: Use sentence case (capitalise first word and proper nouns)
// Do: Write header rows as statements rather than questions or instructions
//
// Related: Also see guidance for writing:
// * [Buttons](./section-components-controls-button.html#components-controls-button-7)
// * [Currency](https://xui.xero.com/product-language-guide/components/writing-style/#currency)
// * [Validation messages](./section-components-collectinginput-forms.html#components-collectinginput-forms-4-12)
//
// Styleguide: Components.DisplayingData.EditableTable.6

// Related components
//
// Related:
// * [Table](./section-components-displayingdata-table.html)
// * [Content block](./section-components-displayingdata-contentblock.html)
// * [Accordion](./section-components-displayingdata-accordion.html)
//
// Styleguide: Components.DisplayingData.EditableTable.99
