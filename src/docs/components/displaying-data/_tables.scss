// Table
//
// Teaser: Used to compare, contrast and sort large amounts of data.
//
// Introduction: Tables are used to compare, contrast, and sort large amounts of data. They are often used as an advanced alternative view to a content block.
//
// Components: Tables
//
// Language: https://docs.google.com/document/d/1YDv-SISe90GmHcnmy24A5KauSQHSbfivP9DXtkCZygI/edit#bookmark=id.ae5828owwqro
//
// Styleguide: Components.DisplayingData.Table

// Anatomy
//
// Tables can be broken into various semantic chunks *(Caption, Head, Body, Row and Cell)* each with their own set of class permutations that can compose a broad set of layout compositions.
// We recommend using the **XUI React** Table component to easily create layout compositions and more advanced table functionality.
//
// Classes:
// xui-readonlytable-hasborder: Applies the border around the table
// xui-readonlytable: Apply to table
// xui-readonlytablerow: Apply to each row, including headers
// xui-readonlytablecell: Apply to each individual cell, including headers
//
// Styleguide: Components.DisplayingData.Table.1

// Headers
//
// Table headers inherit a standard typographic preset with the last column is always right aligned.
// In the case of a sortable table, make sure to include an inline sort icon also.
//
// Classes:
// xui-readonlytablehead: Apply to the table head section
// xui-readonlytablerow: Apply to the heading row
// xui-readonlytablecell: Apply to each individual cell in the header
// xui-readonlytableheadingcell: Apply to each individual cell in the header
//
// Styleguide: Components.DisplayingData.Table.2

// Standard
//
// Tips:
// Do: Prioritise column order left to right
// Warning: Avoid using too many columns to improve cognitive load
//
// Markup: ./examples/table/_table.html
//
// Styleguide: Components.DisplayingData.Table.2.1

// Sortable ascending
//
// Tips:
// Do: Include a sort icon to indicate which column is currently selected
// Do: Reverse the sort direction with each subsequent selection
//
// Markup: ./examples/table/_table-sortable.html
//
// Styleguide: Components.DisplayingData.Table.2.2

// Body
//
// Body content inherits a standard typographic preset with the option to provide visual overrides *(**Boldening** the first column for example)*.
//
// Classes:
// xui-readonlytablebody: Apply to the table body section
// xui-readonlytablerow: Apply to each row, including headers
// xui-readonlytablecell: Apply to each individual cell, including headers
// xui-readonlytablecell-layout: Apply to each individual cell, not including headers
//
// Styleguide: Components.DisplayingData.Table.3

// Standard
//
// Tips:
// Warning: Avoid including too many columns
//
// Markup: ./examples/table/_table-body.html
//
// Styleguide: Components.DisplayingData.Table.3.1

// With actions
//
// Tips:
// Do: Include an overflow menu to surface any actions that can be performed on the individual row
// Do: Always include bulk select controls if any action can be performed, as this is an advanced view mode
// Warning: Only show resulting bulk actions on select
//
// Classes:
// xui-readonlytablecell-action: Apply to cells containing an action, including headers
// xui-readonlytable--checkbox-head: Apply to the checkbox wrapper in the header
// xui-readonlytable--checkbox-body: Apply to the checkbox wrappers in the body
// xui-readonlytableheadingcell--placeholder: Apply to the placeholder heading cell for the overflow menu (only for tables with an overflow menu)
// xui-readonlytablecell--placeholder: Apply to the placeholder body cell for rows without an overflow menu (only for tables with an overflow menu)
// xui-readonlytable--overflowmenu-body: Apply to the overflow button wrapper
//
// Markup: ./examples/table/_table-actions.html
//
// Styleguide: Components.DisplayingData.Table.3.2

// With avatar
//
// Tips:
// Do: When users or contacts are the primary data involved, include avatars for additional context
// Do: Keep avatar and checkbox inline
// Warning: Avoid use of avatar with a rollover checkbox
//
// Markup: ./examples/table/_table-avatars.html
//
// Styleguide: Components.DisplayingData.Table.3.3

// Handling overflow
//
// When the available space in a table cannot fit the information desired, it is appropriate to overflow the table on the X-axis.
//
// Classes:
// xui-readonlytablewrapper--scrollcontainer: Applies overflow scrolling
// xui-readonlytable-pinfirst: Apply to table to pin the first column to the left
// xui-readonlytable-pinlast: Apply to table to pin the last column to the right
// xui-readonlytableoverflow-pinoverflowleft: Apply to the scroll container to add a border to the pinned column on the left
// xui-readonlytableoverflow-pinoverflowright: Apply to the scroll container to add a border to the pinned column on the right
//
// Tips:
// Do: Overflow content when there is not enough room to display all tablular information
// Do: Pin commonly used actions to enable easy access
//
// Exampleclass: ds-example-narrow
//
// Markup: ./examples/table/_table-overflow.html
//
// Styleguide: Components.DisplayingData.Table.4

// Links
//
// Target individual table rows or cells *(but not both)*.
//
// Classes:
// xui-readonlytablerow-link: Applies visual feedback on row interaction
//
// Styleguide: Components.DisplayingData.Table.5

// Single destination
//
// Tips:
// Do: Tint the entire row on hover to clarify that it is a link
//
// Markup: ./examples/table/_table-link-single.html
//
// Styleguide: Components.DisplayingData.Table.5.1

// Multiple destinations
//
// Tips:
// Do: Highlight each separate link on hover
// Dont: Don't nest buttons or anchor tags inside each other
//
// Classes:
// xui-readonlytablecell-link: Applies visual feedback on cell interaction
//
// Markup: ./examples/table/_table-link-multiple.html
//
// Styleguide: Components.DisplayingData.Table.5.2

// Alignment
//
// All cells except cells in the last column of the table align left by default.
//
// Tips:
// Do: Aligned numbers, including currency to the right
// Do: Cells in a column must be aligned consistently with each other, including the heading cell
//
// Classes:
// xui-readonlytableheadingcell-rightaligned: Apply to header cells
// xui-readonlytablecell-rightaligned: Apply to body cells
//
// Markup: ./examples/table/_table-alignment.html
//
// Styleguide: Components.DisplayingData.Table.6

// Showing and hiding columns
//
// Depending on the workflow, it may not be necessary for all columns to be visible at all times. To facilitate this, give users the option to show and hide columns.
//
// This can be done two ways:
// - By conditionally rendering the hidden columns
// - By using the `hiddenColumns` property of `XUITable` which is designed for performance with very large datasets
//
// The mechanism by which Xero users will show and hide columns is not defined via the table component as the desired experience will likely vary depending on the product experience.
//
// Tips:
// Do: Provide the ability to hide and show columns to focus the user on the most important parts of the dataset for their relevant workflow
// Do: Use an appropriate control for your experience, based on design aspects such as visual hierarchy, prevalence of the interaction within the workflow, and the placement of the control with other elements on the page
// Do: Use the `hiddenColumns` property when the dataset is large but consistently structured, and users may wish to hide and show content repeatedly
// Do: All other cases should conditionally render hidden columns. For example, when you plan to save the userâ€™s preferences for future page loads, and columns may not need to be rendered at all
//
// Styleguide: Components.DisplayingData.Table.7

// Related links
//
// Related:
// * [Avatar](./section-components-identifiers-avatar.html)
// * [Bar chart](./section-components-displayingdata-barchart.html)
// * [Checkbox](./section-components-controls-checkbox.html)
// * [Panel](./section-components-displayingdata-panel.html)
//
// Styleguide: Components.DisplayingData.Table.99
