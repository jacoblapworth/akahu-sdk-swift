// Pagination
//
// Components: Pagination
//
// flags: new, updatesComing
//
// Introduction: Pagination is a useful and clear way to break up sets of data within a page that could be over an optimum length. An optimum length should be determined by things like digestibility, performance, data usage, screen real estate and sensible URL schema.
//
// Styleguide: Components.Navigation.Pagination

// Best practice
//
// Tips:
// Do: Use in conjunction with [xui-loader-retain-layout](section-components-identifiers-loader.html#components-identifiers-loader-7) if content will take a while to load.
// Do: Place pagination within the same panel as the content it controls.
// Do: Break up long lists so that they load faster and use less data by default.
// Do: Consider updating the url based on pagination to make it easy for users to revisit a section of a list.
// Do: When applying bulk select functionality, allow users to select the items visible on the current page by default. To select an entire list of items across multiple pages, use a separate action and very explicit language, for example: "Select all items (999)".
// Do: When applying search or sort functionality, apply to the entire list not just the visible page.
// Dont: Don’t paginate a process, instead consider [stepper](section-components-navigation-stepper.html) or [a button](section-components-controls-button.html#components-controls-button-12-1).
//
// Styleguide: Components.Navigation.Pagination.1

// Anatomy
//
// By default pagination displays an items-per-page selector, item count and the paging widget. All of this information is important when paging multiple items per page.
//
// Tips:
// Do: Use to break up long lists
// Do: Place at the bottom of the content being paginated
// Do: Set the scale of the ‘items per page’ selector relative to your context
// Do: Swap the term ‘items’ for a more relevant term where sensible e.g ‘Contacts per page’
// Do: Where possible, default to user’s last selection for items per page
//
// Classes:
// xui-pagination: Pagination container
// xui-pagination--items: Items-per-page selector and item count container
// xui-pagination--items--select: Items-per-page selector
// xui-pagination--items--count: Item count
// xui-pagination--paging: Paging widget container
//
// Markup: ./examples/pagination/_pagination.html
//
// Styleguide: Components.Navigation.Pagination.2

// Layout
//
// For smaller breakpoints the items-per-page selector and the item count are replaced with more concise information that fits its given real estate.
//
// ExampleClass: ds-example-narrow
//
// Markup: ./examples/pagination/_pagination-layout.html
//
// Styleguide: Components.Navigation.Pagination.2.1

// Paging Only
//
// Pagination provides the option to only show the paging widget within the component. This is useful if each page consists of content that can’t be counted or changed.
//
// Tips:
// Do: Use if the content being paged can't be numbered or counted, such as long-form copy
// Dont: Don't use the Paging Only option to paginate lists, instead use the full pagination component
//
// Markup: ./examples/pagination/_pagination-paging.html
//
// Styleguide: Components.Navigation.Pagination.3

// Related links
//
// Related:
// * [Stepper](./section-components-navigation-stepper.html)
// * [Loader](./section-components-identifiers-loader.html)
// * [XUI-buttons / layout](./section-components-controls-button.html#components-controls-button-12)
//
// Styleguide: Components.Navigation.Pagination.99
