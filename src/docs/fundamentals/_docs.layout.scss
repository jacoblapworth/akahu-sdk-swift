// Layout
//
// Teaser: Defining rows, columns and responsive layouts.
//
// Introduction: XUI offers several basic tools to create rows, columns and responsive layouts.
//
// Components: Rows
//
// Note: You may be also interested in the available <a href="section-fundamentals-utilities.html#fundamentals-utilities-1">utility classes</a>, many of which can be used for page layout.
//
// Styleguide: Fundamentals.Layout

// Page width
//
// flag: under review
//
// To specify a sensible max-width on page content, apply one of the following width classes.
//
// From XUI 15 onwards, a near-direct replacement to these classes come in the form of the [Detail Composition](section-compositions-detail.html). If you are upgrading from XUI 14 or earlier, you will need to ensure your layout fits the larger 1200px single-width the detail composition provides, or adjust your layout accordingly.
//
// Definitions:
// Standard: 1000px: `.xui-page-width-standard`
// Large: 1200px: `.xui-page-width-large`
//
// Styleguide: Fundamentals.Layout.1

// Breakpoints
//
// Breakpoints are useful tools that XUI provides to enable responsive experiences in web applications. Most commonly, breakpoints are utilised in [Compositions](section-compositions.html) to provide smart page layout reflowing decisions based off browser width. To understand more about our responsive approach, read our [position](section-getting-started-responsive.html) here.
//
// Definitions:
// Small: 600px: `$xui-breakpoint-small`
// Medium: 800px: `$xui-breakpoint-medium`
// Large: 1000px: `$xui-breakpoint-large`
// xLarge: 1200px: `$xui-breakpoint-xlarge`
// 2xLarge: 1600px: `$xui-breakpoint-2xlarge`
//
// Styleguide: Fundamentals.Layout.2

// Breakpoint Up Mixins
//
// Mixins can be used to apply media queries using breakpoint values. To create a modern web experience, applications should be built using a "[mobile-first](section-getting-started-responsive.html#getting-started-responsive-3)" approach. To enable this, we have `xui-breakpoint-<size>-up` mixins.
//
// Definitions:
// small-up: 600px — ∞: `xui-breakpoint-small-up`
// medium-up: 800px — ∞: `xui-breakpoint-medium-up`
// large-up: 1000px — ∞: `xui-breakpoint-large-up`
// xlarge-up: 1200px — ∞: `xui-breakpoint-xlarge-up`
// 2xlarge-up: 1600px — ∞: `xui-breakpoint-2xlarge-up`
//
// Styleguide: Fundamentals.Layout.2.1

// Breakpoint Range Mixins
//
// If adding responsive experiences to existing legacy applications, it may be more appropriate to implement media queries that target specific ranges. To enable this, we have `xui-breakpoint-<size>-to-<size>` mixins, as well as a down mixin to target down to 0px browser width.
//
// Definitions:
// small-down: 0 — 600px: `xui-breakpoint-small-down`
// small-to-medium: 600px — 800px: `xui-breakpoint-small-to-medium`
// medium-to-large: 800px — 1000px: `xui-breakpoint-medium-to-large`
// large-to-xlarge: 1000px — 1200px: `xui-breakpoint-large-to-xlarge`
// xlarge-to-2xlarge: 1200px — 1600px: `xui-breakpoint-xlarge-to-2xlarge`
//
// Styleguide: Fundamentals.Layout.2.2

// Creating columns
//
// Utilising XUI's 12 column grid provides easy access to the common layout divisors of halves, thirds, and quarters, as well other fractions in 1/12 increments.
//
// Styleguide: Fundamentals.Layout.3

// Rows
//
// To create a column-based layout, first specify which kind of layout is desired by adding one of the following classes to the parent.
//
// Definitions:
// Standard: Standard row: `.xui-row`
// Grid: Row with gutters: `.xui-row-grid`
// Flex: Flex based row: `.xui-row-flex`
//
// Note: The `.xui-row-grid` variant uses negative margins
//
// Markup:
// <div class='xui-row ds-column-example'>
// 	<div class='xui-column-4-of-12'></div>
// 	<div class='xui-column-4-of-12 xui-u-flex'>
// 		<span>Standard</span>
// 	</div>
// 	<div class='xui-column-4-of-12'></div>
// </div>
// <div class='xui-row-grid ds-column-example'>
// 	<div class='xui-column-4-of-12'></div>
// 	<div class='xui-column-4-of-12 xui-u-flex'>
// 		<span>Grid</span>
// 	</div>
// 	<div class='xui-column-4-of-12'></div>
// </div>
// <div class='xui-row-flex xui-u-flex-justify-space-between ds-column-example'>
// 	<div class='xui-column-3-of-12'></div>
// 	<div class='xui-column-3-of-12 xui-u-flex'>
// 		<span>Flex</span>
// 	</div>
// 	<div class='xui-column-3-of-12'></div>
// </div>
//
// Styleguide: Fundamentals.Layout.3.1

// Columns
//
// To specify the widths of child elements, use the following `.xui-column-*-of-12` classes.
//
// Definitions:
// 1/12: Twelfth: `-1-of-12`
// 1/6: Sixth: `-2-of-12`
// 1/4: Quarter: `-3-of-12`
// 1/3: Third: `-4-of-12`
// 5/12: Five twelfths: `-5-of-12`
// 1/2: Half: `-6-of-12`
// 7/12: Seven twelfths: `-7-of-12`
// 2/3: Two thirds: `-8-of-12`
// 3/4: Three quarters: `-9-of-12`
// 5/6: Five sixths: `-10-of-12`
// 11/12: Eleven twelfths:`-11-of-12`
// 1: Full width: `-12-of-12`
//
// ExampleClass: ds-example-flush ds-example-transparent
//
// Markup:
// <div class='xui-row ds-column-example'>
// 	<div class="xui-column-6-of-12">
// 	</div>
// 	<div class="xui-column-6-of-12">
// 	</div>
// </div>
// <div class='xui-row ds-column-example'>
// 	<div class="xui-column-4-of-12">
// 	</div>
// 	<div class="xui-column-4-of-12">
// 	</div>
// 	<div class="xui-column-4-of-12">
// 	</div>
// </div>
// <div class='xui-row ds-column-example'>
// 	<div class="xui-column-3-of-12">
// 	</div>
// 	<div class="xui-column-6-of-12">
// 	</div>
// 	<div class="xui-column-3-of-12">
// 	</div>
// </div>
//
// Styleguide: Fundamentals.Layout.3.2

// Column breakpoints
//
// All columns are also available as responsive modifiers that alter layout at different viewports. Simply add one of the following modifiers to specify the desired behaviour.
//
// Definitions:
// Always: ∞:													none
// Small and up: 600px — ∞: `-small-up`
// Large and up: 1000px — ∞: `-large-up`
//
// ExampleClass: ds-example-flush ds-example-transparent
//
// Markup:
// <div class='xui-row ds-column-example'>
// 	<div class="xui-column-12-of-12 xui-column-6-of-12-large-up">
// 	</div>
// 	<div class="xui-column-12-of-12 xui-column-6-of-12-large-up">
// 	</div>
// </div>
//
// Styleguide: Fundamentals.Layout.3.3

// Nesting
//
// You can also nest columns to achieve a large number of possible layouts.
//
// ExampleClass: ds-example-flush ds-example-transparent
//
// Markup:
// <div class='xui-row ds-column-example'>
// 	<div class="xui-column-6-of-12 xui-row ds-column-example">
// 		<div class="xui-column-6-of-12 xui-row ds-column-example">
// 			<div class="xui-column-6-of-12 xui-row ds-column-example">
// 			</div>
// 		</div>
// 	</div>
// </div>
//
// Styleguide: Fundamentals.Layout.4

// Flex utilities
//
// A number of <a href="section-fundamentals-utilities.html#fundamentals-utilities-1">utility classes</a> are also available for distributing and aligning content using flex.
//
// ExampleClass: ds-example-flush ds-example-transparent
//
// Markup:
// <div class='xui-row-flex xui-u-flex-justify-space-between ds-column-example'>
// 	<div>
// 	</div>
// 	<div>
// 	</div>
// 	<div>
// 	</div>
// </div>
//
// Styleguide: Fundamentals.Layout.5

// Z-Index
//
// Tips:
// Do: Rely on the default layer value where possible
// Do: Use `$xui-z-index-[component-type] + n` to define a layer within the correct range in which your component should live
// Do: Use the very next value necessary to move your component up in the schema eg. `$xui-z-index-[component-type] + 1`)
// Warning: If a layer is not accurately indexed for your context, consider if the context is an anti-pattern or UX concern before shifting it up in the layer schema
// Dont: Use an arbitrary number to layer components
//
// The following variables serve as reference points in the XUI layer schema. They can be used to custom style application content in line with, above, or below existing layers.
//
// Definitions:
// Tooltip: `$xui-z-index-tooltip`: Value of 9000. Topmost layer of an app.
// Toast: `$xui-z-index-toast`: Value of 8000. Layer occupied by toasts.
// Sheet: `$xui-z-index-sheet`: Value of 7000. Layer for dropdown content, when displayed in a narrow viewport.
// Overlay: `$xui-z-index-overlay`: Value of 6000. The mask layer behind a sheet.
// Modal: `$xui-z-index-modal`: Value of 5000. Layer occupied by modals.
// Mask: `$xui-z-index-mask`: Value of 4000. Translucent layer that appears behind modals.
// Nav: `$xui-z-index-nav`: Value of 3000. Layer for the blue navigation bar and its related elements.
// Header: `$xui-z-index-header`: Value of 2000. Layer occupied by white header bars, including fixed-position isolation header.
// Dropdown: `$xui-z-index-dropdown`: Value of 1000. Dropdown content appears at this level.
// Focus: `$xui-z-index-focus`: Value of 2. Focus rings and similar elements to show focus appear in this layer.
// Body: `$xui-z-index-body`: Value of 1. Layer occupied by body content.
// Html: `$xui-z-index-html`: Value of 0. Default stacking context for HTML.
// Hidden: `$xui-z-index-hidden`: Value of -1. For hiding one element behind another.
//
// Styleguide: Fundamentals.Layout.6

// Accessibility
//
// If you are using interactive elements within a tabular layout containing rows and columns, please refer to the <a href="https://www.w3.org/TR/wai-aria-1.1/#grid">aria grid role documentation</a>.
// Each column of the grid must be able to be either active, selectable or editable, as well as being keyboard accessible, in order to apply the appropriate roles.
//	Using the grid role means that the table is considered editable by default, unless the aria-readonlyattribute on the grid is set to true.
//
// Styleguide: Fundamentals.Layout.7
