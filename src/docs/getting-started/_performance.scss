// Performance
//
// Introduction: Performance can often be an overlooked aspect of application development.
//
// Weight: 1.3
//
// Styleguide: Getting Started.Performance

// What is performance?
//
// As Xero moves into supporting responsive web applications on lower powered mobile devices the amount of usage permutations _(Browser / Operating System / Device)_ increases greatly.
//
// In that regard it is important that we ensure Xero users engage in a snappy, predictable and professional application experience on all supported mediums _(legacy and emerging)_.
//
// Styleguide: Getting Started.Performance.1

// Tools
//
// There are many great tools out there for identifying performance bottlenecks in your applications.
//
// ### [React Dev Tools](https://github.com/facebook/react-devtools/)
//
// - **[Profiler](https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html)** <br />
//   Provides a React specific Flame Chart visualisation that can be enriched with Interactions as well as traditional _Mount_ / _Update_ statistics.
//
// - **[Reconciliation Highlighter](https://reactjs.org/blog/2018/09/10/introducing-the-react-profiler.html)** <br />
//   A great way to manually identify wasteful re-renders during the lifecycle of a page session.
//
// ### [Webpack Bundle Analyzer](https://www.npmjs.com/package/webpack-bundle-analyzer/)
//
// Shows you what dependencies are shipping with your bundle. Helps identify unnecessarily large dependencies and duplicates.
//
// ### [Why Did You Update](https://www.npmjs.com/package/why-did-you-update/)
//
// Helps developers understand why wasteful re-renders are occuring by comparing the _before_ and _after_ representations of your applications props and state.
//
// ### [ESLint](https://github.com/cvazac/eslint-plugin-react-perf/)
//
// Integrating an extension to your ESLint library that can help dictate consistent performance best practices in a team environment.
//
// Styleguide: Getting Started.Performance.2

// Optimisations
//
// Performance issues can often be addressed with some simple implementation changes.
//
// - Avoiding unnecessary re-rendering by using [PureComponent](https://reactjs.org/docs/react-api.html#reactpurecomponent) or a [Component / shouldComponentUpdate](https://reactjs.org/docs/optimizing-performance.html#shouldcomponentupdate-in-action) combination. We recommend that components extend from PureComponent unless there is a very good reason not to do so. Stateless functional components always re-render, so use these for simple components only.
//
// - Converting [anonymous functions as props](https://medium.freecodecamp.org/why-arrow-functions-and-bind-in-reacts-render-are-problematic-f1c08b060e36) into persistent function references either bound to the instance or outside the class by passing in the component instance as an argument. Refs should be created using [React.createRef](https://reactjs.org/docs/refs-and-the-dom.html).
//
// - [Ensuring keys are "stable"](https://reactjs.org/docs/lists-and-keys.html#keys) and not bound to the iterators index.
//
// - Remove persistent functionality such as events bound to document or window [when a component unmounts](https://reactjs.org/docs/state-and-lifecycle.html#adding-lifecycle-methods-to-a-class).
//
// - [Bundle splitting](https://github.com/jamiebuilds/react-loadable/) to ensure load times on slower connections remain acceptable. We recommend having a performance budget of 130-170KB _(post-gzip, including CSS and image assets)_ and splitting as required to achieve that.
//
// Styleguide: Getting Started.Performance.3

// Optimising React components
//
// When you create functions inside a React function component, they are re-created with each re-render. You can prevent this by using [the `useCallback()` hook](https://reactjs.org/docs/hooks-reference.html#usecallback)
//
// When a component re-renders it will cause all of its descendants will re-render as well. This can cause performance issues for components with a lot of descendants, such as a table with a lot of cells. Fortunately React offers several ways to control this at the child level.
//
// For function components you can determine when the component should re-render by using [React's memo function](https://reactjs.org/docs/react-api.html#reactmemo). By passing a comparison function as a second argument you can compare if any of the props changed and allow or prevent re-rendering.
//
// For class components you can use [shouldComponentUpdate](https://reactjs.org/docs/react-component.html#shouldcomponentupdate) in the same way.
//
// Styleguide: Getting Started.Performance.3.1

// Patterns
//
// Implementing UI patterns with performance in mind ensures that performance is addressed as a first-class concern in your application from design through to development.
//
// [Our recent work](https://github.dev.xero.com/UXE/xui-layout/wiki/Async-Patterns/) with [XUI Layout](https://github.dev.xero.com/pages/UXE/xui-layout/examples/invoices.html) is a great example of this. We moved intensive search / filter functionality to the server and revised our [pagination pattern](https://docs.google.com/document/d/1Q8c-r6_LeuqCLaRHn2KPMOihTuXsBQ4QM6cfLFIlmFE/) to deliver a faster and more intuitive experience.
//
// As XUI matures around its responsive capabilities, more patterns will be surfaced that are targeted at addressing [perceived performance](https://www.smashingmagazine.com/2015/09/why-performance-matters-the-perception-of-time/).
//
// Styleguide: Getting Started.Performance.4

// Testing
//
// We recommend testing your application on a wide variety of browsers, operating systems and devices.
//
// Gauging your applications “feel” against the same hardware / software scenarios that Xero’s utilise is important when determining things like [input latency](https://developers.google.com/web/tools/lighthouse/audits/estimated-input-latency).
//
// Simulating your application through a Virtual Machine or Emulator does not accurately depict the performance idiosyncrasies associated with a "real world" experience.
//
// The XUI component library supports the following browsers running on their associated physical device.
//
// - **Google Chrome***
// - **Internet Explorer 11**
// - **Microsoft Edge***
// - **Mozilla Firefox***
// - **Safari***
//
// _* Current and previous version_
//
// Styleguide: Getting Started.Performance.5

// Other resources
//
// - [Why Performance Matters](https://developers.google.com/web/fundamentals/performance/why-performance-matters/)
// - [Time to Interactive Explainer](https://github.com/WICG/time-to-interactive#definition)
// - [React Performance Devtool](https://github.com/nitin42/react-perf-devtool/)
//
// Styleguide: Getting Started.Performance.6
