// Responsive Guidelines
//
// Introduction: There are important things to consider when creating an experience that works well across a range of screen sizes and devices. Below are some tips for designing and developing responsive products, followed by other detailed responsive-specific guidelines.
//
// Weight: 1.22
//
// Styleguide: Getting Started.Responsive.Guidelines

// Designing for responsive
//
// As a designer, the most impactful change you can make is to start designing at a small width. It’s far easier to add to designs with progressively more space than it is to retrofit a complex interface into a smaller space, potentially having to compromise on functionality.
//
// XUI has built [Compositions](section-compositions.html) to handle all the reflowing logic straight out of the box. The composition solutions do all the heavy lifting for a responsive layout without any customisation. Designing with the specific composition logic in mind will help you create a consistent responsive experience.
//
// Tips:
// Do: Design pages and flows small-up.
// Do: Use provided best practices and components to consistently build resilient and responsive experiences.
// Do: Use provided XUI composition components for handling responsive reflowing logic.
// Do: Ensure touch targets for interactive controls are large enough to be easily tappable. The -medium size variants of controls are recommended for smaller devices where touch is the primary input mechanism.
// Do: Provide adequate space between controls to prevent mis-taps around clickable areas, and separate blocks of content.
// Warning: Consider the impacts a long page may have on getting back to the navigation or other key functions.
// Dont: Avoid reducing font size for body copy, as what’s readable on a large display often requires zooming on a smaller one. XUI 15 provides a baseline default that is easily readable at all viewports.
// Dont: Be careful pinning elements to the viewport as they constrict the scrollable area. Especially consider interactions with form inputs, which cause software keyboards to open, occupying much of the viewport.
// Dont: Don't rely on hover for essential functionality, as it's not accessible for touch-driven devices. Use click events instead.
// Dont: Don't add or remove essential functionality based on viewport size. A user should be able to do what they need to, regardless of device or browser width.
//
// Styleguide: Getting Started.Responsive.Guidelines.1

// Developing for responsive
//
// Our goal is to create the least amount of additional work for development teams, and instead do what we can to anticipate your needs. In this way, every component has a baseline acceptance for responsive support. This refers to small things like making sure all our CSS is using flexible units, and our JS is performant. For some high use components however, we go the extra mile to make sure the experience is better than just baseline. Components like dropdowns, steppers and tooltips render conditional markup based on screen width, position, and user-defined content. Similarly to accessibility however, if this is not a priority for your team, it will stop there. Extra effort must be added on your part to make sure this standard is maintained across your product.
//
// For React components, XUI provides [Resize Observers](./react/#resize-observers) for monitoring and taking action depending on the size of individual elements. Rather than using CSS media queries to detect the size of the whole viewport, resize observers are attached to a DOM node.
//
// XUI also provides [Container Queries](./react/#container-queries) for React components, which combine the Resize Observers with additional breakpoint logic based on the width of the observed element.
//
// Tips:
// Do: Use provided XUI composition components for handling responsive reflowing logic
// Do: Use provided media query mixins to create additional conditional logic based on screen width
// Do: Build pages using -up media-queries where possible to avoid specificity problems
// Do: Include a meta viewport tag with the necessary settings in the page <head> of your app
// Do: Use provided best practices and components to consistently build resilient and responsive experiences
// Do: Consider small devices and slow network connections in your API design to help limit requests and provide caching for patchy networks
// Do: Understand the impact of losing a connection and take measures to avoid your app breaking completely if this occurs
// Warning: Consider device internet connection performance
// Dont: Never disable zoom programmatically. This is the only tool our users have to to enable access on pages that haven’t been built responsively.
// Dont: Don't rely on hover for essential functionality, as it's not accessible for touch-driven devices. Use click events instead.
//
// Styleguide: Getting Started.Responsive.Guidelines.2

// Hover interactions
//
// Hover interactions can help make an element feel interactive, or hint at how it will behave when its clicked. Small interactions like this are useful, and typical of traditional mouse-and-screen experiences.
//
// Touch devices and some assistive technologies do not provide traditional mouse-driven hover interactions. Even with a mouse, hover interactions can be hard to deal with (e.g for someone with an unsteady hand).
//
// Use hover states to express interactivity, or add a little extra. Don't force a user to rely on hover alone to achieve a task.
//
// Tips:
// Do: Use hover states to add extra, non-essential affordance to interactive elements (e.g color change on an underlined link)
// Do: Offer touch-friendly ways (e.g tap) to achieve actions that otherwise rely on hover
// Dont: Don't rely on hover as the only means to expose content or execute an action
//
// Styleguide: Getting Started.Responsive.Guidelines.3

// Touch targets
//
// Touch targets are the parts of the screen that respond to user input, such as cursor movement/click or a finger press. Depending on the size of the component, touch targets may extend beyond the visual bounds of its width and height. It is important to have adequately sized touch targets, so that users can confidently and accurately interact with elements with a finger press, as well as a cursor.
//
// For more information on touch targets, read [this article from Nielsen Norman Group](https://www.nngroup.com/articles/touch-target-size/)
//
// Styleguide: Getting Started.Responsive.Guidelines.4

// Touch target size
//
// A 40px by 40px touch target is applied by default to all XUI components, with the exception of some `small` and `xsmall` size variants. These exceptions will have a minimum width or height of 40px to account for at least one dimension. Our goal is to further improve these touch targets in the future.
//
// Components with a fixed width and height, such as icon buttons, checkboxes, and radios have “invisible” touch targets. Invisible touch targets meet the minimum size requirement, but don’t affect the component's original visual dimensions. This technique is used to retain layouts while optimising for a more accessible interaction.
//
// Tips:
// Do: Apply minimum touch target size of 40px by 40px to account for touch driven input methods
// Do: Components with a fixed width and height smaller than the defined minimum touch target should have an invisible touch target applied to them
// Warning: If an interactive element cannot meet the touch target size requirement size requirement in both width and height, apply to at least one dimension
//
// Styleguide: Getting Started.Responsive.Guidelines.4.1

// Touch target spacing
//
// It’s important to consider the interactive elements that surround components as to avoid any overlapping of invisible touch targets. Overlapping touch targets can cause users to "slip", and interact with something they weren't intending to.
//
// Tips:
// Do: Provide adequate space between interactive elements so that touch targets don’t overlap
// Don't: Don’t present multiple small components inline or stacked on top of each other without additional spacing
//
// Styleguide: Getting Started.Responsive.Guidelines.4.2
