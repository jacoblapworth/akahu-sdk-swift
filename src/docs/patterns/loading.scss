// Loading
//
// Introduction: At times, visual feedback is required to maintain focus, illustrate progress, and communicate change to the customer.
//
// Styleguide: Patterns.Loading

// Best practice
//
// Tips:
// Do: Challenge arbitrary technical constraints that make things slow
// Do: Show signifiers on a page as soon as possible to set expectations
// Do: Use loaders as visual indicators of loading content
// Do: Present data as soon as it is available
// Warning: Use local storage with caution (accuracy is better than speed)
// Warning: Always have a loading strategy for dynamic data even if response times are usually fast, as data speeds can vary
// Dont: Don’t show visual indicators for static data
//
// Styleguide: Patterns.Loading.1


// Applications
//
// Styleguide: Patterns.Loading.2

// Pages
//
// Tips:
// Do: Load in page elements structurally from the base up, starting with the top-level navigation (ie. Global navigation or Isolation header)
// Do: If content is not predictable, and there are many objects fetching asynchronously, use a visual indicator on the entire section below the header
//
// Styleguide: Patterns.Loading.2.1

// Panels
//
// Tips:
// Do: Display the surrounding container with xui-loader inside until content is available
// Do: While loading content, display panel title, search and filters if present
// Do: If the panel dimensions are fixed (eg, only shows 3 most recent items), retain this known height when loading to prevent content jumping around
// Do: Animate affected objects at the end of the process (eg. fade the content in)

// Lists
//
// Tips:
// Do: Display 30 items* on initial load (if n<50, truncate to 30) (if n<50, show all)
// Do: Display 30 items on each subsequent load
// Do: Use scroll position as a trigger to load more content (Total rows - 10, load 30 more)
// Do: Buttons can also be used as explicit actions to load more content
// Do: Position the loader outside content on each subsequent load
//
// Styleguide: Patterns.Loading.2.2

// Modals
//
// Tips:
// Do: Display the modal with xui-loader inside until content is available
// Do: Display modal title, close and submit button unless they are dynamically generated
// Do: Provide a min-height for adequate spacing around xui-loader
// Do: After user action, use xui-loader inside the button until the action is complete
// Do: Animate affected objects the end of the process (eg. fade the page in)
//
// Styleguide: Patterns.Loading.2.3

// Dropdowns
//
// Tips:
// Do: Display the dropdown with xui-loader inside until content is available
// Do: When loading, provide a min-height the equivalent of 5 rows
// Do: On subsequent loads, retain whatever the current min-height is, until new results are rendered
//
// Styleguide: Patterns.Loading.2.4

// Buttons
//
// Tips:
// Do: Use xui-loader inside the button until the action is complete
// Do: Retain original button width when inserting loader, to stop elements jumping around
// Do: Animate affected objects at the end of the process (eg, collapse deleted item)
//
// Styleguide: Patterns.Loading.2.5

// Search
//
// Tips:
// Do: Fetch data after each keydown
// Do: Simulate loading immediately on keydown, even if it hasn’t technically occured yet
// Do: Delay actual data fetch by 100ms to allow for fast typing
//
// Styleguide: Patterns.Loading.2.6

// Autosave
//
// Tips:
// Do: Use persistent text to indicate progress
// Do: Indicate state change via subtle text changes, as this is likely to happen repeatedly
// Dont: Don’t block parts of the app whilst saving
//
// Styleguide: Patterns.Loading.2.7

// Handling errors
//
// Styleguide: Patterns.Loading.3

// Failure to load
//
// Tips:
// Do: Return to the previous state
// Do: Use a toast or banner to communicate the issue
// Do: Present an option to retry
//
// Styleguide: Patterns.Loading.3.1

// Long response times
//
// Tips:
// Do: Use a toast or banner to communicate the issue
// Do: Presenting an option to retry or diagnose the issue
//
// Styleguide: Patterns.Loading.3.2

// References
//
// Styleguide: Patterns.Loading.4

// Components
//
// * [Loader](section-building-blocks-identifiers-loader.html)
// * [Button](section-building-blocks-controls-button.html)
// * [Panel](section-compounds-displayingdata-panel.html)
// * [Dropdown](section-compounds-collectinginput-dropdowns.html)
// * [Modal](section-compounds-collectinginput-modals.html)
//
// Styleguide: Patterns.Loading.4.1

// Similar pages
//
// * Pagination
// * Errors
// * Autosave
// * Skeleton loaders (TBC)
// * [Toast](section-building-blocks-alerts-toast.html)
// * [Banner](section-building-blocks-alerts-banner.html)
//
// Styleguide: Patterns.Loading.4.2
