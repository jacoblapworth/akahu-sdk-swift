// Developing with XUI
//
// Introduction: XUI provides CSS and React components. The best way to get started with XUI is to include the CSS via CDN and install the components via NPM.
//
// Weight: 1.1
//
// Styleguide: Getting Started.Developing with XUI

// Getting Started
//
// #### Load CSS via CDN (Recommended)
//
// Include the following `link` in your page:
//
// <!--?prettify lang=html?-->
// ```html
// <link rel="stylesheet" href="https://edge.xero.com/style/xui/15.0.0-alpha.6/xui.min.css"/>
// ```
//
// #### Sherlock
//
// You can use [Sherlock](https://github.dev.xero.com/Xero/Sherlock) to resolve the latest version of XUI for a given semver range.
// A Sherlock manifest is available at `https://edge.xero.com/style/xui/sherlock.json`.
// If you are building an application that may live alongside other versions of XUI on the same page, see the [Advanced usage](#getting-started-developing-with-xui-5) section below.
//
// #### Add base classes to HTML template
//
// XUI CSS is designed to work as well with legacy projects as with greenfield projects. It is almost exclusively class based with only the bare minimum element selectors to initialise pages.
//
// For new projects add the `xui-body` class to your `<body>` element and `xui-html` class to your `<html>` element.
//
// For legacy pages where `xui-body` can not be used globally `xui-container` should wrap any XUI sections to provide XUI base styling to a specific part of a page.
//
// Styleguide: Getting Started.Developing with XUI.1

// Structure of CSS
//
// XUI CSS can be generally thought of as six parts:
//
// 1. **Reset** is the reset of browser CSS, this sets an even experience for all browsers for the core HTML elements including `html`, `body`, and `main` as examples.
// 2. **Base** is the the basic CSS classes you need to start writing a XUI-based application.
// 3. **Structure** is where you will find your page layouts.
// 4. **Containers** is the home for the components we make that generally _contain_ other components such as panels.
// 5. **Components** is where the bulk of the CSS library lives, the bread and butter which is the core UI components themselves such as `button` and `accordion`
// 6. **Utils** is where the features of the library that aren't specific to a component live, such as the margin and padding classes as well as layout helpers. They're generally very specific and perform one task.
//
// Styleguide: Getting Started.Developing with XUI.1.1

// Conventions and standards
//
// * XUI uses a [convention](https://github.dev.xero.com/UXE/xui/blob/master/CONTRIBUTING.md#scss) inspired by SMACSS and BEM to name things.
// * We strongly favour a flat class-based approach to CSS.
// * We don't support CSS in JavaScript.
// * We author in SCSS and ship a single CSS artifact.
// * XUI styling should be additive and avoid overwriting styled properties.
// * XUI CSS works without React components but components are preferred.
// * Margin, padding and positioning styles should be provided in optional `-layout` classes.
// * By default we use the `xui-` namespace. Please use your own namespace for any custom code.
// * XUI does not provide a comprehensive reset style as to not make assumptions about resetting elements that may have already been styled.
//
// Styleguide: Getting Started.Developing with XUI.1.2

// Staying up-to-date
//
// An important goal of XUI is to allow our applications to remain consistent as technology and our UI evolves. The best way to ease the upgrade process is to:
//
// * Avoid writing your own CSS as much as possible, particularly if your CSS overrides XUI's styling. The less custom CSS you have, the easier it will be to upgrade to future versions of XUI.
//
// * Prefer XUI React components over custom components. XUI components are tested to work as a suite and will work across upgrades automatically or have a tested migration path.
//
// Styleguide: Getting Started.Developing with XUI.1.3

// Installing React components
//
// We use an internal artifactory server to host XUI Components. Make them available to NPM by adding the following to .npmrc in your projects root folder. More info on Confluence: [Consuming Xero NPM Modules](https://confluence.inside.xero.com/display/FED/Using+Artifactory).
//
// <!--?prettify?-->
// ```js
// @xero:registry=https://af.inside.xero-support.com/artifactory/api/npm/npm-dev
// registry=https://af.inside.xero-support.com/artifactory/api/npm/npm-upstream
// ```
//
// Install XUI with npm
//
// <!--?prettify?-->
// ```bash
// npm install --save @xero/xui
// ```
//
// This will install all the XUI components into `node_modules/@xero/xui` and should be correctly pathed for using with Webpack or Rollup.
//
// Related components are grouped together in a single entry point to make importing related components easier. Components will always export a default and may have additional named exports.
//
// Use standard es6 import syntax to import XUI components.
//
// <!--?prettify lang=js?-->
// ```
// import XUIButton, { XUIButtonCaret } from '@xero/xui/react/button';
// import DropDown, { DropDownToggled } from '@xero/xui/react/dropdown';
// ```
//
// Full component documentation can be found in the [XUI React Docs](./react/).
//
// Styleguide: Getting Started.Developing with XUI.2

// Conventions and standards
//
// * We use vanilla React (and don't provide any redux/application state management)
// * We prefer stateless and pure components for performance reasons
// * All components should be accessible (have correct roles, tabindexes and other attributes) and internationalisable (default values are ok, but must be overridable via props)
// * We use PropTypes but not Flow or TS
//
// Styleguide: Getting Started.Developing with XUI.2.1

// Extending XUI
//
// We would really like you to use XUI provided CSS and React components but if what you need isn't in the library we provide a couple of ways of extending XUI.
//
// 1. XUI exposes its variables and mixins and these can be brought into an application or component to gain access to values for colours, spacing and other properties.
// 2. XUI React components can be used to compose new and interesting components that can be used inside an app and shared with your friends
//
// If you're planning on writing a component using our CSS, we recommend the following two files as your keys to building using our conventions and standards.
//
// |File|Description|
// |:--|:--|
// |/src/sass/_vars.scss|You'll be able to access all of XUI's variables we use throughout the XUI css system including colours, spacing, borders and typography|
// |/src/sass/_mixins.scss|Mixins are used reasonably heavily to template features of the components we build, from buttons to our responsive breakpoint system, you'll find what you need here|
//
// Styleguide: Getting Started.Developing with XUI.3

// Contributing
//
// We would love your help. XUI is structured to work like an inner source project with the core team providing ongoing ownership and support. We have a quarterly release cycle and the core team progress a themed project each quarter and manage the backlog of ad hoc requests.
//
// We encourage you to join the discussions on issues and pull requests. As the core of XUI evolves we are putting in support structures to make it easier to contribute. [CONTRIBUTING.md](#) will always contain the detailed information around the process to contribute to the project.
//
// Styleguide: Getting Started.Developing with XUI.4

// Advanced usage
//
// XUI's CSS classes are namespaced with a `xui-` prefix. This can be a problem if you are building an application that needs to run on pages that may already contain some version of XUI.
// Examples include the new header, the lifelong learning platform, and any addon that wants to use XUI without resorting to iframes.
// To support these use-cases, XUI's CSS namespace is implemented as a variable (`$ns`) that can be changed if you bundle XUI yourself rather than using the main XUI CDN file.
//
// In your main SCSS file, set the `$ns` variable *before* you import XUI. And import XUI before you write any custom CSS.
//
// <!--?prettify lang=scss?-->
// ```scss
// $ns: "zooey"; // Replace zooey with your custom namespace
// @import "@xero/xui/sass/xui"
// // your custom CSS goes here
// ```
//
// That takes care of the SCSS. If you use XUI's React components, you will also need to configure the new namespace in your JS.
//
// Create a new file in your project with the following code:
//
// <!--?prettify lang=js?-->
// ```js
// import {setXUIClassNamespace} from "@xero/xui/react/components/helpers/xuiClassNamespace";
// setXUIClassNamespace('zooey'); // Replace zooey with your custom namespace
// ```
//
// Then, import the file you created *before* you import any XUI file, or any custom component that imports XUI.
// Your entry point file would be a great place for this.
//
// This is important because many of XUI's components cache class names, and those class names are determined when the
// component is first imported. So if you call `setXUIClassNamespace` after XUI's components have been imported, then
// only a few components will reflect the new namespace and you'll see unsupported and undefined behaviour.
//
// <!--?prettify lang=js?-->
// ```js
// import './setupXUIClassNamespace'; // Replace this with the name of the file you created
// import MyComponent from './MyComponent';
// import React from 'react';
// import ReactDOM from 'react-dom';
//
// const appEl = document.getElementById('app');
// ReactDOM.render(<MyComponent />, appEl);
// ```
//
// Now, instead of `xui-button`, you'll have `zooey-button`, and that same class name will be used by the `<XUIButton />` component.
//
// Styleguide: Getting Started.Developing with XUI.5
