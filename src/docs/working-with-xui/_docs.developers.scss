// Developing with XUI
//
// Introduction: Set some expectations about what it is and does. It’s unlikely to solve everything. You’ll still need to design. We’re here to help — and link off to [feedback](./section-feedback.html) and [updates](./section-updates.html) pages
//
// Weight: 1.1
//
// Styleguide: Getting Started.Developing with XUI


// Using XUI CSS
//
//  * Make sure XUI is loaded or imported before any of your other stylesheets.
//  * Add the `xui-body` class to your `<body>` element
//  * Add the `xui-html` class to your `<html>` element
//
// Styleguide: Getting Started.Developing with XUI.1

// Adding XUI elements to legacy pages
//
// For pages with legacy CSS that are unable to use `xui-body`, wrap XUI components in a container
// with the `xui-container` class applied. This sets base level styling.
//
// If you find legacy CSS is overriding XUI rules, you can also use the `xui-container` mixin to apply these rules to more specific selectors in your own CSS.
//
// Styleguide: Getting Started.Developing with XUI.1.1

// Using XUI React components
//
// Styleguide: Getting Started.Developing with XUI.2

// Conventions and standards
//
// * XUI uses BEM to name things
// * Something about using separate -layout classes
// * All rules get the `xui-` namespace - please use your own namespace for any custom code never this
// * We don't have a reset
//
// Styleguide: Getting Started.Developing with XUI.3

// Staying up-to-date
//
// An important goal of XUI is to allow our applications to remain consistent as
// technology and our UI evolves. There's a few strategies for making upgrades relatively painless.
//
// * Avoid writing your own CSS as much as possible, particularly if your CSS
//    overrides XUI's styling. The less custom CSS you have, the easier it will be
//    to upgrade to future versions of XUI.
//
// Styleguide: Getting Started.Developing with XUI.4

// Custom code and contributing
//
// Styleguide: Getting Started.Developing with XUI.5
