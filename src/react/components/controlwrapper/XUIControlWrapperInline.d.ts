import * as React from 'react';

interface Props {
  children?: React.ReactNode;
  /**
   * Class names to be added to the field wrapper element.
   */
  fieldClassName?: string;
  /**
   * Hint message to show under the input.
   */
  hintMessage?: React.ReactNode;
  /**
   * Whether the current input value is invalid.
   */
  isInvalid?: boolean;
  /**
   * Should label be applied as an `aria-label`, rather than being visibly displayed.
   */
  isLabelHidden?: boolean;
  /**
   * Label to show beside the input.
   */
  label?: React.ReactNode;
  /**
   * Class names to add to the label.
   */
  labelClassName?: string;
  /**
   * Class names to add to the hint and validation messages.
   */
  messageClassName?: string;
  /**
   * Function to call on click inside the control.
   */
  onClick?: React.MouseEventHandler<HTMLLabelElement>;
  /**
   * Function to call on keydown inside the control.
   */
  onKeyDown?: React.KeyboardEventHandler<HTMLLabelElement>;
  qaHook?: string;
  /**
   * Class names to be added to the root wrapper element.
   */
  rootClassName?: string;
  /**
   * Validation message to show under the input if `isInvalid` is `true`.
   */
  validationMessage?: React.ReactNode;
  /**
   * IDs generated by `generateIds` and passed in from the parent component.
   */
  wrapperIds: {
    control?: string;
    label?: string;
    message?: string;
  };
}

export default class XUIControlWrapperInline extends React.PureComponent<Props> {}
