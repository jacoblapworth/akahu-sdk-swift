@use "sass:math";
@use 'sass:meta';

@import 'utilities';
@import '../vars';
@import 'functions.decimals';
@import './layout.marginpadding';
@import './layout.breakpoints';

// Only works on pure numbers, not percentages or pixels. Perform any math first.
@function xui-truncate-number($numbertotruncate, $truncateto: 0.01) {
  $truncation-amount: $numbertotruncate % $truncateto;
  @return $numbertotruncate - $truncation-amount;
}

// Convert a pure number into a percentage to use for styling.
@function xui-convert-to-percentage($numbertoconvert) {
  @return $numbertoconvert * 1%;
}

@mixin xui-column-width-generator($numberofcolumns, $columnpercentage, $gutter: 0) {
  $calculated-width: 100;
  $single-column-width: math.div(100, $numberofcolumns);

  $calculated-width: $single-column-width * $columnpercentage;
  $truncated-width: xui-truncate-number($calculated-width);
  @if (meta.type-of($gutter) == number and $gutter > 0) {
    width: calc(#{xui-convert-to-percentage($truncated-width)} - #{$gutter});
  } @else {
    width: xui-convert-to-percentage($truncated-width);
  }
}

@mixin xui-column-responsive-generator($padded: false) {
  @for $i from $xui-layout-column-start through $xui-layout-columns {
    $suffix: '#{$i}-of-#{$xui-layout-columns}';

    @if ($padded == false) {
      @include xui-breakpoint-small-up {
        .#{$ns}-column-#{$suffix}-small-up {
          float: left;
          @include xui-column-width-generator($xui-layout-columns, $i);
        }
      }
    } @else {
      @include xui-breakpoint-small-up {
        .#{$ns}-row-grid > .#{$ns}-column-#{$suffix}-small-up {
          float: left;
          @include xui-column-width-generator($xui-layout-columns, $i, $xui-grid-gutter);
        }
      }
    }
  }
  @for $i from $xui-layout-column-start through $xui-layout-columns {
    $suffix: '#{$i}-of-#{$xui-layout-columns}';
    $width: decimal-floor(math.div(100%, 12) * $i, 2);

    @if ($padded == false) {
      @include xui-breakpoint-large-up {
        .#{$ns}-column-#{$suffix}-large-up {
          float: left;
          @include xui-column-width-generator($xui-layout-columns, $i);
        }
      }
    } @else {
      @include xui-breakpoint-large-up {
        .#{$ns}-row-grid > .#{$ns}-column-#{$suffix}-large-up {
          float: left;
          @include xui-column-width-generator($xui-layout-columns, $i, $xui-grid-gutter);
        }
      }
    }
  }
}

@mixin xui-column-width-generator2($padded: false) {
  @for $i from $xui-layout-column-start through $xui-layout-columns {
    $suffix: '#{$i}-of-#{$xui-layout-columns}';

    @if ($padded == false) {
      .#{$ns}-column-#{$suffix} {
        float: left;
        @include xui-column-width-generator($xui-layout-columns, $i);
      }
    } @else {
      @if ($i < $xui-layout-columns) {
        .#{$ns}-row-grid > .#{$ns}-column-#{$suffix} {
          @include xui-column-width-generator($xui-layout-columns, $i, $xui-grid-gutter);
        }
      } @else {
        .#{$ns}-row-grid > .#{$ns}-column-#{$suffix} {
          width: calc(100% - #{$xui-grid-gutter});
        }
      }
    }
  }
}

@mixin xui-page-width-and-spacing-standard {
  max-width: $xui-page-width-small;
  @include xui-margin-horizontal(auto);
  @include xui-column-width-generator(1, 1);
}

@mixin xui-page-width-and-spacing-large {
  max-width: $xui-page-width-large;
  @include xui-margin-horizontal(auto);
  @include xui-column-width-generator(1, 1);
}

@mixin xui-composition-grid-gap {
  grid-gap: $xui-grid-gutter $xui-grid-gutter;
  // Transform forces a repaint solves issues where
  // Removing and reapplying the grid gap class wouldn't
  // show a grid gap in some browsers.
  -webkit-transform: scale(1);
}

// Used for master-detail-summary layouts
@mixin xui-composition-3-column-max-widths {
  &.#{$ns}-composition-has-auto-widths {
    &.#{$ns}-composition-has-auto-space-around {
      grid-template-columns: 290px minmax(0, 1fr) 290px;

      &.#{$ns}-composition-has-grid-gap {
        -ms-grid-columns: 290px $xui-grid-gutter minmax(0, 1fr) $xui-grid-gutter 290px;
      }
    }

    &:not(.#{$ns}-composition-has-auto-space-around) {
      grid-template-columns: 300px minmax(0, 1fr) 300px;

      &.#{$ns}-composition-has-grid-gap {
        -ms-grid-columns: 300px $xui-grid-gutter minmax(0, 1fr) $xui-grid-gutter 300px;
      }
    }
  }
}

// Used for master-detail and medium-locked master-detail-summary layouts
@mixin xui-composition-narrow-left-max-widths {
  &.#{$ns}-composition-has-auto-widths {
    &.#{$ns}-composition-has-auto-space-around {
      grid-template-columns: 290px minmax(0, 1fr);

      &.#{$ns}-composition-has-grid-gap {
        -ms-grid-columns: 290px $xui-grid-gutter minmax(0, 1fr);
      }
    }

    &:not(.#{$ns}-composition-has-auto-space-around) {
      grid-template-columns: 300px minmax(0, 1fr);

      &.#{$ns}-composition-has-grid-gap {
        -ms-grid-columns: 300px $xui-grid-gutter minmax(0, 1fr);
      }
    }
  }
}

// Used for detail-summary layouts
@mixin xui-composition-narrow-right-max-widths {
  &.#{$ns}-composition-has-auto-widths {
    &.#{$ns}-composition-has-auto-space-around {
      grid-template-columns: minmax(0, 1fr) 290px;

      &.#{$ns}-composition-has-grid-gap {
        -ms-grid-columns: minmax(0, 1fr) $xui-grid-gutter 290px;
      }
    }

    &:not(.#{$ns}-composition-has-auto-space-around) {
      grid-template-columns: minmax(0, 1fr) 300px;

      &.#{$ns}-composition-has-grid-gap {
        -ms-grid-columns: minmax(0, 1fr) $xui-grid-gutter 300px;
      }
    }
  }
}
