@import '../vars';
@import '../mixins';

// Icons
//
// Introduction: An overview of all our icons and how to use them in your project.
//
// Teaser: An extensive set of icons for use inside buttons and other UI elements.
//
// Components: Icon
//
// Styleguide: Fundamentals.Icons

// Usage
//
// The classes outlined here are only responsible for styling the icons, and do not contain the SVG data themselves.
// To include the SVG data, you will need to import the icons into your page using the following script, and then reference their name via the `xlink:href` attribute.
// If you are using React, this is not required. For more information, visit the <a href='https://github.dev.xero.com/UXE/xui-icon'>xui-icon repository</a>.
//
// @xuiIconLoaderURL
//
// Definitions:
// Class: Apply to `<svg>` tag: `.xui-icon`
// Name: Apply to `<use>` tag: `#xui-icon-*`
//
// Styleguide: Fundamentals.Icons.1

// Size
//
// Icons are available in a number of sizes.
// The default size is optimised for use inside buttons and form controls.
// The additional sizes are intended mainly for read-only contexts such as empty states or success screens.
// If using the `iconLoader` script mentioned above, adding the following classes will modify the scale of the icons added to your page.
//
// Definitions:
// Default: Standard scale: none
// Large: : 1.33 scale: `.xui-icon-large`
// xLarge: 1.5 scale: `.xui-icon-xlarge`
//
// Markup:
//  <svg focusable="false" class="xui-icon">
//		<use xlink:href="#xui-icon-search" role="presentation"/>
//	</svg>
//  <svg focusable="false" class="xui-icon xui-icon-large">
//		<use xlink:href="#xui-icon-search" role="presentation"/>
//	</svg>
//  <svg focusable="false" class="xui-icon xui-icon-xlarge">
//		<use xlink:href="#xui-icon-search" role="presentation"/>
//	</svg>
//
// Styleguide: Fundamentals.Icons.2

// Placement
//
// By default, icons are placed inline. When a set size is required, use the wrapper classes to center them in a box.
//
// Definitions:
// Base: `.xui-iconwrapper`: Sets the position of the icon in it's container box
// Medium: `.xui-iconwrapper-medium`:  Sets the size to medium
// Large: `.xui-iconwrapper-large`: Sets the size to large
// XLarge: `.xui-iconwrapper-xlarge`: Sets the size to xlarge
//
// Markup:
// <div class="xui-iconwrapper xui-iconwrapper-medium xui-textcolor-inverted ds-example-dark">
//   <svg class="xui-icon"><use xlink:href="#xui-icon-filter" role="presentation"/></svg>
// </div>
// <div class="xui-iconwrapper xui-iconwrapper-large xui-textcolor-inverted ds-example-dark">
//   <svg class="xui-icon xui-icon-large"><use xlink:href="#xui-icon-filter" role="presentation"/></svg>
// </div>
// <div class="xui-iconwrapper xui-iconwrapper-xlarge xui-textcolor-inverted ds-example-dark">
//   <svg class="xui-icon xui-icon-xlarge"><use xlink:href="#xui-icon-filter" role="presentation"/></svg>
// </div>
//
// Styleguide: Fundamentals.Icons.3

// Color
//
// By default, icons inherit the color of the parent element.
// However, there are a number of color modifiers available to specify your own, when inheritance is not desired.
//
// Definitions:
// Inherit:  		none
// Black: 			`.xui-icon-color-black`
// White: 			`.xui-icon-color-white`
// Blue: 				`.xui-icon-color-blue`
// Dark Blue: 	`.xui-icon-color-dark-blue`
// Red: 				`.xui-icon-color-red`
// Green: 			`.xui-icon-color-green`
// Orange: 			`.xui-icon-color-orange`
// Yellow: 			`.xui-icon-color-yellow`
// Mint: 				`.xui-icon-color-mint`
// Turquoise: 	`.xui-icon-color-turquoise`
// Voilet: 			`.xui-icon-color-violet`
// Grape: 			`.xui-icon-color-grape`
// Pink: 				`.xui-icon-color-pink`
// PDF: 				`.xui-icon-color-file-pdf`
// Spreadsheet: `.xui-icon-color-file-spreadsheet`
// White muted: `.xui-icon-color-white-muted`
// White faint: `.xui-icon-color-white-faint`
// Black muted: `.xui-icon-color-black-muted`
// Black faint: `.xui-icon-color-black-faint`
//
// Markup:
// <div class="xui-row-flex">
//	<div class="xui-iconwrapper xui-iconwrapper-medium">
// 		<svg focusable="false" class="xui-icon">
// 			<use xlink:href="#xui-icon-filter" role="presentation"/>
// 		</svg>
//  </div>
//	<div class="xui-iconwrapper xui-iconwrapper-medium">
// 		<svg focusable="false" class="xui-icon xui-icon-color-black-muted">
// 			<use xlink:href="#xui-icon-contact" role="presentation"/>
// 		</svg>
//  </div>
//	<div class="xui-iconwrapper xui-iconwrapper-medium">
// 		<svg focusable="false" class="xui-icon xui-icon-color-blue">
// 			<use xlink:href="#xui-icon-xero" role="presentation"/>
// 		</svg>
//  </div>
//	<div class="xui-iconwrapper xui-iconwrapper-medium">
// 		<svg focusable="false" class="xui-icon xui-icon-color-red">
// 			<use xlink:href="#xui-icon-stop" role="presentation"/>
// 		</svg>
//  </div>
//	<div class="xui-iconwrapper xui-iconwrapper-medium">
// 		<svg focusable="false" class="xui-icon xui-icon-color-green">
// 			<use xlink:href="#xui-icon-checkbox-check" role="presentation"/>
// 		</svg>
//  </div>
//	<div class="xui-iconwrapper xui-iconwrapper-medium">
// 		<svg focusable="false" class="xui-icon xui-icon-color-file-pdf">
// 			<use xlink:href="#xui-icon-file-pdf" role="presentation"/>
// 		</svg>
//  </div>
//	<div class="xui-iconwrapper xui-iconwrapper-medium">
// 		<svg focusable="false" class="xui-icon xui-icon-color-file-spreadsheet">
// 			<use xlink:href="#xui-icon-file-spreadsheet" role="presentation"/>
// 		</svg>
//  </div>
//	<div class="xui-iconwrapper xui-iconwrapper-medium ds-example-dark">
// 		<svg focusable="false" class="xui-icon xui-icon-color-white">
// 			<use xlink:href="#xui-icon-notification" role="presentation"/>
// 		</svg>
//  </div>
//	<div class="xui-iconwrapper xui-iconwrapper-medium ds-example-dark">
// 		<svg focusable="false" class="xui-icon xui-icon-color-white-muted">
// 			<use xlink:href="#xui-icon-link" role="presentation"/>
// 		</svg>
//  </div>
//	<div class="xui-iconwrapper xui-iconwrapper-medium ds-example-dark">
// 		<svg focusable="false" class="xui-icon xui-icon-color-white-faint">
// 			<use xlink:href="#xui-icon-print" role="presentation"/>
// 		</svg>
//  </div>
// </div>
//
// Styleguide: Fundamentals.Icons.4

// Rotation
//
// The following classes provide rotation in 90 degree increments.
//
// Definitions:
// Default: 	none
// 90deg: 		`.xui-icon-rotate-90`
// 180deg: 		`.xui-icon-rotate-180`
// 270deg: 		`.xui-icon-rotate-270`
//
// Markup:
// <div class="xui-iconwrapper xui-iconwrapper-medium">
//   <svg focusable="false" class="xui-icon">
//     <use xlink:href="#xui-icon-arrow" role="presentation"/>
//   </svg>
// </div>
// <div class="xui-iconwrapper xui-iconwrapper-medium">
//   <svg focusable="false" class="xui-icon xui-icon-rotate-90">
//     <use xlink:href="#xui-icon-arrow" role="presentation"/>
//   </svg>
// </div>
// <div class="xui-iconwrapper xui-iconwrapper-medium">
//   <svg focusable="false" class="xui-icon xui-icon-rotate-180">
//     <use xlink:href="#xui-icon-arrow" role="presentation"/>
//   </svg>
// </div>
// <div class="xui-iconwrapper xui-iconwrapper-medium">
//   <svg focusable="false" class="xui-icon xui-icon-rotate-270">
//     <use xlink:href="#xui-icon-arrow" role="presentation"/>
//   </svg>
// </div>
//
// Styleguide: Fundamentals.Icons.5

// Accessibility
//
// We highly encourage you to add <a href='https://www.sitepoint.com/tips-accessible-svg/'>screen reader information</a> to SVGs. This can be done by adding the `<title>` and `<desc>` tags.
//
// Styleguide: Fundamentals.Icons.6

// Available icons
//
// <div id="xuiIconShowcase" class="prettyprint"></div>
//
// Styleguide: Fundamentals.Icons.7

/* xui-iconsymbol is added to the icon blob produced by the xui-icon repository */
.#{$ns}-iconsymbol {
  fill-rule: evenodd;
  shape-rendering: auto;
}

.#{$ns}-iconwrapper {
  align-items: center;
  display: inline-flex;
  justify-content: center;

  &-medium {
    height: $xui-icon-medium;
    width: $xui-icon-medium;
  }

  &-large {
    height: $xui-icon-large;
    width: $xui-icon-large;
  }

  &-xlarge {
    height: $xui-icon-xlarge;
    width: $xui-icon-xlarge;
  }
}

.#{$ns}-icon {
  display: inline-block;
  fill: currentColor;
  fill-rule: evenodd;
  flex: none; // Prevent distortion if parent has display: flex
  pointer-events: none; // Don't hog the cursor if inside buttons/links
}

.#{$ns}-icon-rotate-90 {
  transform: rotate(90deg);
}

.#{$ns}-icon-rotate-180 {
  transform: rotate(180deg);
}

.#{$ns}-icon-rotate-270 {
  transform: rotate(-90deg);
}

@each $colourName, $colorHex in $icon-colours {
  .#{$ns}-icon-color-#{$colourName} {
    fill: $colorHex;
  }
}
