@import '../vars';

// Popover
//
// Teaser: To highlight pertinent features or provide additional helper text.
//
// Language: https://docs.google.com/document/d/1YDv-SISe90GmHcnmy24A5KauSQHSbfivP9DXtkCZygI/edit#bookmark=id.i0mg8rwa59ob
//
// Introduction: Popovers are used to highlight pertinent new features or provide additional helper text without affecting the underlying page layout.
//
// Styleguide: Building Blocks.Alerts.Popover

// Best practice
//
// Tips:
// Do: Use an arrow to ensure popovers are pointing to the correct element
// Warning: Avoid relying on popovers as a crutch for a bad experience
// Dont: Don't use popovers to provide primary functionality
//
// Styleguide: Building Blocks.Alerts.Popover.1

// Anatomy
//
// ExampleClass: ds-example-narrow ds-example-flush ds-example-transparent
//
// To create a popover element, use the following classes.
// Note that content and layout is dictated entirely by the consumer.
//
// Classes:
// xui-popover: Base popover class
// xui-popover-arrow: Modifier to add default top left arrow
//
// Markup:
//	<div class="xui-popover xui-popover-arrow xui-padding-large" role="tooltip" aria-labelledby="popover-message">
//		<div id="popover-message">Content</div>
//	</div>
//
// Styleguide: Building Blocks.Alerts.Popover.2

// Arrow position
//
// To specify a different position for the arrow element, add an additional `xui-popover-arrow*` modifier.
//
// Classes:
// -topleft: Modifier for a top-left arrow
// -topcenter: Modifier for a top-center arrow
// -topright: Modifier for a top-right arrow
// -righttop: Modifier for a right-top arrow
// -rightcenter: Modifier for a right-center arrow
// -rightbottom: Modifier for a right-bottom arrow
// -bottomleft: Modifier for a bottom-left arrow
// -bottomcenter: Modifier for a bottom-center arrow
// -bottomright: Modifier for a bottom-right arrow
// -lefttop: Modifier for a left-top arrow
// -leftcenter: Modifier for a left-center arrow
// -leftbottom: Modifier for a left-bottom arrow
//
// Styleguide: Building Blocks.Alerts.Popover.2.1

// Dismissing popovers
//
// ExampleClass: ds-example-narrow ds-example-flush ds-example-transparent
//
// To dismiss a popover, make sure to either attach an event handler on its trigger, or include internal buttons that toggle visiblity.
// We recommended using the following [utility class](section-fundamentals-utilities.html#fundamentals-utilities-3) to do this.
//
// Classes:
// xui-u-hidden: Modifier to toggle popover visibility
//
// Markup:
// <div class="xui-popover xui-popover-arrow xui-popover-arrow-lefttop" role="dialog" aria-labelledby="feature-header" aria-desribedby="feature-description">
// 	<div class="xui-u-flex xui-u-flex-align-center xui-padding-top xui-padding-right xui-padding-left-large">
// 		<div id="feature-header" class="xui-heading-item">New view modes</div>
// 		<button class="xui-button xui-button-icon xui-margin-left-auto" title="Close">
// 			<svg focusable="false" class="xui-icon">
// 				<use xlink:href="#xui-icon-cross" role="presentation"></use>
// 			</svg>
// 		</button>
// 	</div>
// 	<div id="feature-description" class="xui-textcolor-muted xui-padding-top-xsmall xui-padding-horizontal-large">Choose how much detail you see by switching between simple or advanced view modes here.</div>
// 	<div class='xui-u-flex xui-u-flex-align-center xui-u-flex-justify-space-between xui-padding-top-small xui-padding-right xui-padding-bottom xui-padding-left-large'>
// 		<div class='xui-text-small xui-textcolor-muted'>Step 1 of 3</div>
// 		<button class="xui-button xui-button-small xui-button-borderless-main">Next</button>
// 	</div>
// </div>
//
// Styleguide: Building Blocks.Alerts.Popover.3

// Accessibility
//
// At a very minimum, the purpose of a popover should be clearly stated using the `aria-labelledby` and 	`aria-describedby` attributes.
//
// Additionally, an appropriate role must be defined, and differs for each use case.
// The `tooltip` [role](https://www.w3.org/TR/wai-aria-1.1/#tooltip) is used for popovers that provide helper text and become visible in response to a mouse or keyboard event.
// The `dialog` [role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_dialog_role) is used when it is still possible to interact with content outside of the popover while it is being displayed.
//
// Styleguide: Building Blocks.Alerts.Popover.4

.#{$ns}-popover {
  background-color: $xui-popover-bg-color;
  border-radius: $xui-radius;
  box-shadow: $xui-shadow-depth-lift;
  position: relative;
}

.#{$ns}-popover-arrow:before {
  border-bottom: $xui-s-xsmall solid $xui-popover-arrow-border-color;
  border-left: $xui-s-xsmall solid transparent;
  border-right: $xui-s-xsmall solid transparent;
  content: '';
  left: 15px;
  position: absolute;
  top: -9px;
}

.#{$ns}-popover-arrow:after {
  border-bottom: $xui-s-xsmall solid $xui-popover-bg-color;
  border-left: $xui-s-xsmall solid transparent;
  border-right: $xui-s-xsmall solid transparent;
  content: '';
  left: 15px;
  position: absolute;
  top: -7px;
}

.#{$ns}-popover-arrow {
  &-topleft:before {
    left: 15px;
    top: -9px;
  }

  &-topcenter:before {
    left: 50%;
    transform: translateX(-50%);
  }

  &-topright:before {
    left: auto;
    right: 15px;
  }

  &-bottomleft:before {
    bottom: -9px;
    top: auto;
    transform: rotate(180deg);
  }

  &-bottomcenter:before {
    bottom: -9px;
    left: 50%;
    top: auto;
    transform: translateX(-50%) rotate(180deg);
  }

  &-bottomright:before {
    bottom: -9px;
    left: auto;
    right: 15px;
    top: auto;
    transform: rotate(180deg);
  }

  &-lefttop:before {
    left: -13px;
    top: 15px;
    transform: rotate(270deg);
  }

  &-leftcenter:before {
    left: -13px;
    top: 50%;
    transform: translateY(-50%) rotate(270deg);
  }

  &-leftbottom:before {
    bottom: 15px;
    left: -13px;
    top: auto;
    transform: rotate(270deg);
  }

  &-righttop:before {
    left: auto;
    right: -13px;
    top: 15px;
    transform: rotate(90deg);
  }

  &-rightcenter:before {
    left: auto;
    right: -13px;
    top: 50%;
    transform: translateY(-50%) rotate(90deg);
  }

  &-rightbottom:before {
    bottom: 15px;
    left: auto;
    right: -13px;
    top: auto;
    transform: rotate(90deg);
  }
  &-topleft:after {
    left: 15px;
    top: -7px;
  }
  &-topcenter:after {
    left: 50%;
    transform: translateX(-50%);
  }

  &-topright:after {
    left: auto;
    right: 15px;
  }

  &-bottomleft:after {
    bottom: -7px;
    top: auto;
    transform: rotate(180deg);
  }

  &-bottomcenter:after {
    bottom: -7px;
    left: 50%;
    top: auto;
    transform: translateX(-50%) rotate(180deg);
  }

  &-bottomright:after {
    bottom: -7px;
    left: auto;
    right: 15px;
    top: auto;
    transform: rotate(180deg);
  }

  &-lefttop:after {
    left: -11px;
    top: 15px;
    transform: rotate(270deg);
  }

  &-leftcenter:after {
    left: -11px;
    top: 50%;
    transform: translateY(-50%) rotate(270deg);
  }

  &-leftbottom:after {
    bottom: 15px;
    left: -11px;
    top: auto;
    transform: rotate(270deg);
  }

  &-righttop:after {
    left: auto;
    right: -11px;
    top: 15px;
    transform: rotate(90deg);
  }

  &-rightcenter:after {
    left: auto;
    right: -11px;
    top: 50%;
    transform: translateY(-50%) rotate(90deg);
  }

  &-rightbottom:after {
    bottom: 15px;
    left: auto;
    right: -11px;
    top: auto;
    transform: rotate(90deg);
  }
}
