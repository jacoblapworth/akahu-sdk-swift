@import "marginpadding.margin";

$xui-grid-gutter: $xui-s-large;
$xui-layout-columns: 12;
$xui-layout-column-start: 1;

@mixin xui-clearfix {
	&::before,
	&::after {
		content: " ";
		display: table;
	}

	&::after {
		clear: both;
	}
}

// Layout and Structure
//
// XUI has two types of grid systems: one where the developer does not specify the width of any of
// of the columns and the columns will evenly fill the space available. And one where the developer specifies at
// least one of the column widths. The fixed width columns are 12ths based units.
//
// ### Accessibility
// If the use of these grids in your application is to create an interactive control which contains columns of tabular
// data arranged in rows and columns,then using the `grid` role would be appropriate.
// Using the `grid` role means that the table is considered editable unless otherwise specified by setting the
// `aria-readonly` attribute on the grid to true.
// Each row in the grid must have the role `row` and each cell within the rows must have the role `gridcell`.
// The columns of the grid must able to be either active, selectable or editable in order to apply the `gridcell` role.
// The grid must also be keyboard accessible, as described in the
// [W3C documentation on managing focus](https://www.w3.org/TR/wai-aria/usage#managingfocus).
//
// Refer to the [W3C Documentation on grids](https://www.w3.org/TR/wai-aria/roles#grid) for further information about
// using the `grid` role and its associated roles and attributes.
//
// Styleguide: Grid Layout

// Typical Page Layouts
//
// These set of component classes are designed to let you achieve the typical set of page level layouts we have in
// 95% of typical Xero designs.
//
// These are very opinionated, and provide for you Margins, and Responsive handlers. The reason these exist are because
// it's impossible to achieve this type of responsive margin / change layout given the current set of utilities the
// XUI library provides.
//
// Markup:
// <div class="xui-page-width-standard">
//  <div class="xui-panel">Hello</div>
// </div>
// <div class="xui-page-width-standard xui-page-layout-sidebar-right">
//  <div class="xui-panel xui-page-layout-sidebar-right--main">Hello</div>
//  <div class="xui-panel xui-page-layout-sidebar-right--sidebar">Hello two</div>
// </div>
// <div class="xui-page-width-standard xui-page-layout-sidebar-right">
//  <div class="xui-panel xui-page-layout-sidebar-right--main">Hello</div>
//  <p class="xui-page-layout-sidebar-right--sidebar">I'm a bit of text that can exist floating next to my main content, it's pretty easy to replicate this type of display</p>
// </div>
// <div class="xui-page-width-standard xui-page-layout-sidebar-left">
//  <div class="xui-panel xui-page-layout-sidebar-left--sidebar">Hello</div>
//  <div class="xui-panel xui-page-layout-sidebar-left--main">Hello two</div>
// </div>
// <div class="xui-page-width-standard xui-page-layout-split">
//  <div class="xui-panel xui-page-layout-split-left">Left Box</div>
//  <div class="xui-panel xui-page-layout-split-right">Hello two</div>
// </div>
//
// Styleguide: Grid Layout.1

// Fixed Percentage Width Columns
//
// Use these classes when you want to control the width of a column in your specific layout.
// These classes provide % widths based on the width of their parent container.
// They act in a grid-like fashion without forcing you into specific pixel widths. Pixel widths are bad for responsive
// stories.
//
// To begin using these classes you need to use the wrapper `.xui-layout-fixed` class. The wrapper class provides the
// clearfix required to properly layout subsequent sections of content.
//
// **Table of available classes**
//
// **Note:** While all variations of classes are available, these docs have removed sizes that are similar for brevity.
//
// <table class="xui-contentblock xui-margin-bottom">
//  <thead>
//   <tr class="xui-sectionheading">
//    <th class="xui-text-sectionheading xui-padding-sm">Class</th>
//    <th class="xui-text-sectionheading xui-padding-vertical-sm">Width of container</th>
//    <th class="xui-text-sectionheading xui-padding-vertical-sm">Max # of columns</th>
//   </tr>
//  </thead>
//  <tbody>
//   <tr class="xui-contentblock--item">
//    <td class="xui-text-cell xui-padding-sm">`.xui-layout-column-1-of-1`</td>
//    <td class="xui-text-cell">100%</td>
//    <td class="xui-text-cell">1</td>
//   </tr>
//   <tr class="xui-contentblock--item">
//    <td class="xui-text-cell xui-padding-sm">`.xui-layout-column-1-of-2`</td>
//    <td class="xui-text-cell">50%</td>
//    <td class="xui-text-cell">2</td>
//   </tr>
//   <tr class="xui-contentblock--item">
//    <td class="xui-text-cell xui-padding-sm">
//     `.xui-layout-column-1-of-3`<br />
//     `.xui-layout-column-2-of-3`
//    </td>
//    <td class="xui-text-cell">
//     33.33%<br />
//     66.67%
//    </td>
//    <td class="xui-text-cell">3</td>
//   </tr>
//   <tr class="xui-contentblock--item">
//    <td class="xui-text-cell xui-padding-sm">
//     `.xui-layout-column-1-of-4`<br />
//     `.xui-layout-column-3-of-4`
//    </td>
//    <td class="xui-text-cell">
//     25%<br />
//     75%
//    </td>
//    <td class="xui-text-cell">4</td>
//   </tr>
//   <tr class="xui-contentblock--item">
//    <td class="xui-text-cell xui-padding-sm">
//     `.xui-layout-column-1-of-5`<br />
//     `.xui-layout-column-2-of-5`<br />
//     `.xui-layout-column-3-of-5`<br />
//     `.xui-layout-column-4-of-5`
//    </td>
//    <td class="xui-text-cell">
//     20%<br />
//     40%<br />
//     60%<br />
//     80%<br />
//    </td>
//    <td class="xui-text-cell">5</td>
//   </tr>
//   <tr class="xui-contentblock--item">
//    <td class="xui-text-cell xui-padding-sm">
//     `.xui-layout-column-1-of-6`<br />
//     `.xui-layout-column-5-of-6`<br />
//    </td>
//    <td class="xui-text-cell">
//     16.67%<br />
//     83.33%<br />
//    </td>
//    <td class="xui-text-cell">6</td>
//   </tr>
//   <tr class="xui-contentblock--item">
//    <td class="xui-text-cell xui-padding-sm">
//     `.xui-layout-column-1-of-7`<br />
//     `.xui-layout-column-2-of-7`<br />
//     `.xui-layout-column-3-of-7`<br />
//     `.xui-layout-column-4-of-7`<br />
//     `.xui-layout-column-5-of-7`<br />
//     `.xui-layout-column-6-of-7`
//    </td>
//    <td class="xui-text-cell">
//     14.29%<br />
//     28.57%<br />
//     42.85%<br />
//     57.14%<br />
//     71.43%<br />
//     85.71%
//    </td>
//    <td class="xui-text-cell">7</td>
//   </tr>
//   <tr class="xui-contentblock--item">
//    <td class="xui-text-cell xui-padding-sm">
//     `.xui-layout-column-1-of-8`<br />
//     `.xui-layout-column-3-of-8`<br />
//     `.xui-layout-column-5-of-8`<br />
//     `.xui-layout-column-7-of-8`
//    </td>
//    <td class="xui-text-cell">
//     12.5%<br />
//     37.5%<br />
//     62.5%<br />
//     87.5%
//    </td>
//    <td class="xui-text-cell">8</td>
//   </tr>
//   <tr class="xui-contentblock--item">
//    <td class="xui-text-cell xui-padding-sm">
//     `.xui-layout-column-1-of-9`<br />
//     `.xui-layout-column-2-of-9`<br />
//     `.xui-layout-column-4-of-9`<br />
//     `.xui-layout-column-5-of-9`<br />
//     `.xui-layout-column-7-of-9`<br />
//     `.xui-layout-column-8-of-9`
//    </td>
//    <td class="xui-text-cell">
//     11.11%<br />
//     22.22%<br />
//     44.44%<br />
//     55.55%<br />
//     77.77%<br />
//     88.88%<br />
//    </td>
//    <td class="xui-text-cell">9</td>
//   </tr>
//   <tr class="xui-contentblock--item">
//    <td class="xui-text-cell xui-padding-sm">
//      `.xui-layout-column-1-of-10`<br />
//      `.xui-layout-column-3-of-10`<br />
//      `.xui-layout-column-7-of-10`<br />
//      `.xui-layout-column-9-of-10`
//    </td>
//    <td class="xui-text-cell">
//      10%<br />
//      30%<br />
//      70%<br />
//      90%<br />
//    </td>
//    <td class="xui-text-cell">10</td>
//   </tr>
//   <tr class="xui-contentblock--item">
//    <td class="xui-text-cell xui-padding-sm">
//     `.xui-layout-column-1-of-11`<br />
//     `.xui-layout-column-2-of-11`<br />
//     `.xui-layout-column-3-of-11`<br />
//     `.xui-layout-column-4-of-11`<br />
//     `.xui-layout-column-5-of-11`<br />
//     `.xui-layout-column-6-of-11`<br />
//     `.xui-layout-column-7-of-11`<br />
//     `.xui-layout-column-8-of-11`<br />
//     `.xui-layout-column-9-of-11`<br />
//     `.xui-layout-column-10-of-11`
//    </td>
//    <td class="xui-text-cell">
//     9.09%<br />
//     18.18%<br />
//     27.27%<br />
//     36.36%<br />
//     45.45%<br />
//     54.54%<br />
//     63.63%<br />
//     72.72%<br />
//     81.81%<br />
//     90.90%
//    </td>
//    <td class="xui-text-cell">11</td>
//   </tr>
//   <tr class="xui-contentblock--item">
//    <td class="xui-text-cell xui-padding-sm">
//     `.xui-layout-column-1-of-12`<br />
//     `.xui-layout-column-5-of-12`<br />
//     `.xui-layout-column-7-of-12`<br />
//     `.xui-layout-column-11-of-12`
//    </td>
//    <td class="xui-text-cell">
//     8.33%<br />
//     41.67%<br />
//     58.33%<br />
//     91.66%
//    </td>
//    <td class="xui-text-cell">12</td>
//   </tr>
//  </tbody>
// </table>
//
// **Example**
//
// Markup:
// <div class="xui-layout-fixed">
//   <div class="xui-layout-column-1-of-3">
//     <p>.xui-layout-column-1-of-3</p>
//   </div>
//   <div class="xui-layout-column-1-of-3">
//     <p>.xui-layout-column-1-of-3</p>
//   </div>
//   <div class="xui-layout-column-1-of-3">
//     <p>.xui-layout-column-1-of-3</p>
//   </div>
// </div>
//
// Styleguide: Grid Layout.2

@mixin xui-layout-fixed {
	@include xui-clearfix();
}

.#{$ns}-layout-fixed {
	@include xui-layout-fixed;
}

/*
 * Helper mixin for specifying the layout class once but have it also spit out the device
 * specific classes
 */
@mixin xui-fixed-column-generator($suffix, $width) {

	.#{$ns}-layout-column-#{$suffix} {
		float: left;
		width: $width;
	}

	@include xui-breakpoint-narrow {
		.#{$ns}-layout-column-#{$suffix}-narrow {
			float: left;
			width: $width;
		}
	}

	@include xui-breakpoint-medium {
		.#{$ns}-layout-column-#{$suffix}-medium {
			float: left;
			width: $width;
		}
	}

	@include xui-breakpoint-wide {
		.#{$ns}-layout-column-#{$suffix}-wide {
			float: left;
			width: $width;
		}
	}
}

@for $i from $xui-layout-column-start through $xui-layout-columns {

	@for $j from $xui-layout-column-start through $i {

		@if $j == $i {

			$width: 100%;
			@include xui-fixed-column-generator("#{$j}-of-#{$i}", $width);

		} @else {

			$width: calc((100% / #{$i}) * #{$j});

			@include xui-fixed-column-generator("#{$j}-of-#{$i}", $width);
		}

	}

}

// Fluid Columns
//
// Use these classes when you want an even number of columns that share a similar width.
//
// To begin using these classes you need to use the wrapper `.xui-layout-fluid` class. The wrapper class provides the
// ability for it's children to be fluid (display:flex).
//
// The `xui-layout-column-fluid` class gives these columns a `flex` value of 1. As you add columns to the container,
// each column will get smaller proportionally and all columns will continue to have an equal width.
//
// Markup:
// <div class="xui-layout-fluid">
//   <div class="xui-layout-column-fluid">
//     <p>.xui-layout-column-fluid</p>
//   </div>
//   <div class="xui-layout-column-fluid">
//     <p>.xui-layout-column-fluid</p>
//   </div>
//   <div class="xui-layout-column-fluid">
//     <p>.xui-layout-column-fluid</p>
//   </div>
//   <div class="xui-layout-column-fluid">
//     <p>.xui-layout-column-fluid</p>
//   </div>
// </div>
//
// Styleguide: Grid Layout.3

@mixin xui-layout-fluid {
	align-content: flex-start;
	display: flex;
	flex-wrap: wrap;
}

@mixin xui-fixed-column-generator {
	.#{$ns}-layout-fluid {
		@include xui-layout-fluid;
	}

	.#{$ns}-layout-column-fluid {
		flex: 1 1 auto;
	}
}

@include xui-fixed-column-generator;

// Fluid & Fixed
//
// `xui-layout-column-*-of-*` classes, and `xui-layout-column-fluid` classes can be combined to share and grow
// the maximum possible number of columns within a container.
//
// To begin using the classes together, use the `xui-layout` class. This wrapper class combines the properties of
// the `xui-layout-fixed` and `xui-layout-fluid` classes together.
//
// **Note:** It's inadvisable to use these classes on the same elements.
// ~~`<div class="xui-layout-column-fluid xui-layout-column-1-of-2"></div>`~~
//
// Markup:
// <div class="xui-layout">
//  <div class="xui-layout-column-1-of-3">
//   <p>.xui-layout-column-1-of-3</p>
//  </div>
//  <div class="xui-layout-column-fluid">
//   <p>.xui-layout-column-fluid</p>
//  </div>
// </div>
// <div class="xui-layout">
//  <div class="xui-layout-column-1-of-2">
//   <p>.xui-layout-column-1-of-2</p>
//  </div>
//  <div class="xui-layout-column-fluid">
//   <p>.xui-layout-column-fluid</p>
//  </div>
//  <div class="xui-layout-column-fluid">
//   <p>.xui-layout-column-fluid</p>
//	</div>
// </div>
//
// Styleguide: Grid Layout.4

.#{$ns}-layout {
	@include xui-layout-fixed;
	@include xui-layout-fluid;
}

// Viewport Sizes
//
// Fixed columns have responsive modifiers that can be appended to them. These modifiers allow you to control the
// width of a column at an associated viewport size. It is not recommended to use a combination of fluid / fixed on
// the same element, this will give you headaches.
//
// Change your browser width to see an example of how these columns adjust based on your screen width.
//
// **Note:** Modifiers are available on ALL `.xui-layout-*-of-*` classes.
//
// <table class="xui-contentblock xui-margin-bottom">
//  <thead>
//   <tr class="xui-sectionheading">
//    <th class="xui-text-sectionheading xui-padding-sm">Viewport size</th>
//    <th class="xui-text-sectionheading xui-padding-vertical-sm">Modifier</th>
//    <th class="xui-text-sectionheading xui-padding-vertical-sm">Example</th>
//   </tr>
//  </thead>
//  <tbody>
//   <tr class="xui-contentblock--item">
//    <td class="xui-text-cell xui-padding-sm">Always</td>
//    <td class="xui-text-cell">n/a</td>
//    <td class="xui-text-cell">`.xui-layout-1-of-3`</td>
//   </tr>
//   <tr class="xui-contentblock--item">
//    <td class="xui-text-cell xui-padding-sm">Medium viewport widths (&gt; 940px &lt; 1160px)</td>
//    <td class="xui-text-cell">`-medium`</td>
//    <td class="xui-text-cell">`.xui-layout-1-of-3-medium`</td>
//   </tr>
//   <tr class="xui-contentblock--item">
//    <td class="xui-text-cell xui-padding-sm">Wide viewport widths (&gt; 1160px)</td>
//    <td class="xui-text-cell">`-wide`</td>
//    <td class="xui-text-cell">`.xui-layout-1-of-3-wide`</td>
//   </tr>
//  </tbody>
// </table>
//
// Markup:
// <div class="xui-layout">
//   <div class="xui-layout-column-1-of-1 xui-layout-column-1-of-3-wide">
//     <p>1 of 1 or <br />1 of 3 lg</p>
//   </div>
//   <div class="xui-layout-column-1-of-1 xui-layout-column-1-of-3-wide">
//     <p>1 of 1 or <br />1 of 3 lg</p>
//   </div>
//   <div class="xui-layout-column-fluid">
//     <p>Will float when there's space or 100%</p>
//   </div>
// </div>
// <div class="xui-layout">
//   <div class="xui-layout-column-1-of-2">
//     <p>1 of 2 always</p>
//   </div>
//   <div class="xui-layout-column-fluid">
//     <p>Will always float in this case</p>
//   </div>
// </div>
//
// Styleguide: Grid Layout.5

// Nesting
//
// Fluid, and Fixed columns can be nested to achieve any possible number of layout combinations.
//
// This example illustrates some combinations.
//
// Markup:
// <div class="xui-layout">
//   <div class="xui-layout-column-1-of-1 xui-layout-column-1-of-3-wide xui-layout xui-padding-sm">
//     <div class="xui-layout-column-fluid">I'm fluid!</div>
//   </div>
//   <div class="xui-layout-column-1-of-1 xui-layout-column-1-of-3-wide xui-layout">
//     <div class="xui-layout-column-fluid">I'm fluid!</div>
//     <div class="xui-layout-column-fluid">I'm fluid!</div>
//   </div>
//   <div class="xui-layout-column-fluid xui-padding">
//     <div class="xui-layout-column-1-of-1 xui-layout-column-1-of-3-wide">
//       I'm fixed
//     </div>
//     <div class="xui-layout-column-1-of-1 xui-layout-column-1-of-3-wide">
//       I'm fixed
//     </div>
//     <div class="xui-layout-column-1-of-1 xui-layout-column-1-of-3-wide">
//       I'm fixed
//     </div>
//   </div>
// </div>
//
// Styleguide: Grid Layout.6

@mixin xui-page-width-and-spacing-standard {
	max-width: $xui-page-width-small;
	@include xui-margin-top($xui-s-large);
	@include xui-margin-bottom(0);
	@include xui-margin-horizontal(auto);
	width: 100%;
}

@mixin xui-page-width-and-spacing-large {
	max-width: $xui-page-width-large;
	margin: $xui-s-large auto 0;
	width: 100%;
}

@mixin xui-page-layout-sidebar-right {

	.#{$ns}-page-layout-sidebar-right {
		@include xui-clearfix;
	}

	.#{$ns}-page-layout-sidebar-right--main {
		width: 100%;

		@include xui-breakpoint-wide {
			float: left;
			width: calc((100% / 9) * 6);
		}
	}

	.#{$ns}-page-layout-sidebar-right--sidebar {
		@include xui-margin-top($xui-grid-gutter);
		width: 100%;

		@include xui-breakpoint-wide {
			@include xui-margin-left($xui-grid-gutter);
			@include xui-margin-top(0);
			float: left;
			width: calc((100% / 9) * 3 - #{$xui-grid-gutter});
		}
	}

}

@mixin xui-page-layout-sidebar-left {

	.#{$ns}-page-layout-sidebar-left {
		@include xui-clearfix;
	}

	.#{$ns}-page-layout-sidebar-left--sidebar {
		@include xui-margin-top($xui-grid-gutter);
		width: 100%;

		@include xui-breakpoint-wide {
			@include xui-margin-right($xui-grid-gutter);
			@include xui-margin-top(0);
			float: left;
			width: calc((100% / 9) * 3 - #{$xui-grid-gutter});
		}
	}

	.#{$ns}-page-layout-sidebar-left--main {
		@include xui-margin-top($xui-grid-gutter);
		width: 100%;

		@include xui-breakpoint-wide {
			@include xui-margin-top(0);
			float: left;
			width: calc((100% / 9) * 6);
		}
	}

}

@mixin xui-page-layout-split {

	.xui-page-layout-split {
		@include xui-clearfix;
	}

	.#{$ns}-page-layout-split-left {
		width: 100%;

		@include xui-breakpoint-wide {
			@include xui-margin-right($xui-grid-gutter / 2);
			float: left;
			width: calc((100% / 2) - #{$xui-grid-gutter / 2});
		}
	}

	.#{$ns}-page-layout-split-right {
		@include xui-margin-top($xui-grid-gutter);
		width: 100%;

		@include xui-breakpoint-wide {
			@include xui-margin-left($xui-grid-gutter / 2);
			@include xui-margin-top(0);
			float: left;
			width: calc((100% / 2) - #{$xui-grid-gutter / 2});
		}
	}

}

.#{$ns}-page-width-standard {
	@include xui-clearfix;
	@include xui-page-width-and-spacing-standard;
}

.#{$ns}-page-width-large {
	@include xui-clearfix;
	@include xui-page-width-and-spacing-large;
}

@include xui-page-layout-sidebar-right;
@include xui-page-layout-sidebar-left;
@include xui-page-layout-split;
