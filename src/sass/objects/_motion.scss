@import "../vars";

// Motion
//
// In the physical world, objects adhere to the laws of physics. Things cannot simply appear and disappear, or change
// their nature in an instant. Change occurs over time.
// In the digital world however, this isn’t necessarily the case, and change can happen in a matter of milliseconds.
// This can be jarring to say the least.
// The challenge is to be able to communicate these changes in an understandable way to our users.
// Motion is another tool under our belt to help us do this.
//
// Weight: 2.10
//
// Styleguide: Motion

// Classes
//
// `.xui-transition`
//
// Simply add this class to an element, and it will add a default XUI transition to it. This method animates all properties by default.
// An example of where this could be used is changing basic properties like text colour on hover, or position on screen of an object after the addition of a class.
//
// `.xui-transition-fadein` & `.xui-transition-fadeout`
//
// For animating opacity only (other properties will not animate). A good example of where this is used, is the masks on our modals.
// Additionally, this could be used for toggling visibility of elements based on other content being selected.
//
// `.xui-transition-grow` & `.xui-transition-shrink`
//
// For animating max-height & opacity (other properties will not animate). A good example of where this is used, is our dropdown.
// Additionally, this could be used for adding and deleting rows dynamically from a list.
//
// `.xui-transition-scaleup` & `.xui-transition-scaledown`
//
// For animating scale & opacity (other properties will not animate). A good example of where this is used, is our modals.
// Additionally, this could be used for showing & hiding tooltips or other temporary elements.
//
// Styleguide: Motion.1


// Modifiers
//
// Alternatively, you can use a combination of the following classes, for more granular control.
//
// ### Speed
//
// You can specify the speed of the transition if you like, by using the following modifiers:
//
// `.xui-transition-speed-slow`, `.xui-transition-speed-medium`, `.xui-transition-speed-fast`
//
// ### Curve
//
// You can specify what kind of motion it is you’re animating by using the following modifiers:
//
// `.xui-transition-curve-standard`, `.xui-transition-curve-enter`, `.xui-transition-curve-exit`
//
// For example, if something is entering the point of focus, it responds differently to something leaving it.
// The effects of friction are different in each context. If it is difficult to define, use standard. This eases in both directions.
//
// ### Delay
//
// Often it doesn't make sense to animate all elements simultaneously, and you want to wait until another element has finished its own transition.
// To save you having to delay the application of classes via javascript, you can use the following modifiers which match the speed classes exactly:
//
// `.xui-transition-delay-short`, `.xui-transition-delay-medium`, `.xui-transition-delay-long`
//
// Styleguide: Motion.2

// Tokens
//
// If you're interested in using the XUI motion variables themselves in SCSS code, you can use the following tokens.
// They have been created using the motion namespace, as they can be used in both basic transitions, as well as more complex `@keyframe` animations.
//
// ### Speed
//
// `$xui-motion-speed-slow`, `$xui-motion-speed-medium`, `$xui-motion-speed-fast`
//
// ### Curve
//
// `$xui-motion-curve-standard`, `$xui-motion-curve-enter`, `$xui-motion-curve-exit`
//
// ### Delay
//
// `$xui-motion-delay-short`, `$xui-motion-delay-medium`, `$xui-motion-delay-long`
//
// Styleguide: Motion.3

// Deprecated Keyframes
//
// ![](https://img.shields.io/badge/Deprecated%20in-10.23.0-%23f6534e.svg)
// ![](https://img.shields.io/badge/Removed%20in-12.0.0-lightgrey.svg)
//
// The following keyframes are available:
//
// `xui-animation-show` and `xui-animation-hide`
//
// `xui-animation-slideup` and `xui-animation-slidedown`
//
// `xui-animation-fadein` and `xui-animation-fadeout`
//
// Styleguide: Motion.4

.#{$ns}-transition-scaleup {
	opacity: 1;
	pointer-events: auto;
	transform: scale(1);
	transition-duration: $xui-motion-speed-fast;
	transition-property: transform, opacity;
	transition-timing-function: $xui-motion-curve-enter;
}

.#{$ns}-transition-scaledown {
	opacity: 0;
	pointer-events: none;
	transform: scale(0.9);
	transition-duration: $xui-motion-speed-fast;
	transition-property: transform, opacity;
	transition-timing-function: $xui-motion-curve-exit;
}

.#{$ns}-transition-fadein {
	opacity: 1;
	pointer-events: auto;
	transition-duration: $xui-motion-speed-fast;
	transition-property: opacity;
	transition-timing-function: $xui-motion-curve-enter;
}

.#{$ns}-transition-fadeout {
	opacity: 0;
	pointer-events: none;
	transition-duration: $xui-motion-speed-fast;
	transition-property: opacity;
	transition-timing-function: $xui-motion-curve-exit;
}

.#{$ns}-transition-grow {
	max-height: 100vh;
	opacity: 1;
	overflow: hidden;
	pointer-events: auto;
	transition-duration: $xui-motion-speed-fast;
	transition-property: max-height, opacity;
	transition-timing-function: $xui-motion-curve-enter;
}

.#{$ns}-transition-shrink {
	max-height: 0;
	opacity: 0;
	overflow: hidden;
	pointer-events: none;
	transition-duration: $xui-motion-speed-fast;
	transition-property: max-height, opacity;
	transition-timing-function: $xui-motion-curve-exit;
}

.#{$ns}-transition {
	transition-curve: $xui-motion-curve-standard;
	transition-property: all;
	transition-speed: $xui-motion-speed-medium;
}

.#{$ns}-transition-speed-fast {
	transition-duration: $xui-motion-speed-fast;
}

.#{$ns}-transition-speed-medium {
	transition-duration: $xui-motion-speed-medium;
}

.#{$ns}-transition-speed-slow {
	transition-duration: $xui-motion-speed-slow;
}

.#{$ns}-transition-curve-standard {
	transition-timing-function: $xui-motion-curve-standard;
}

.#{$ns}-transition-curve-enter {
	transition-timing-function: $xui-motion-curve-enter;
}

.#{$ns}-transition-curve-exit {
	transition-timing-function: $xui-motion-curve-exit;
}

.#{$ns}-transition-delay-short {
	transition-delay: $xui-motion-delay-short;
}

.#{$ns}-transition-delay-medium {
	transition-delay: $xui-motion-delay-medium;
}

.#{$ns}-transition-delay-long {
	transition-delay: $xui-motion-delay-long;
}

// Deprecated utility classes
//
// ![](https://img.shields.io/badge/Deprecated%20in-10.21.0-%23f6534e.svg)
// ![](https://img.shields.io/badge/Removed%20in-12.0.0-lightgrey.svg)
//
// Classes:
// xui-u-transition-long: Modifier for long animation transition between transforms
// xui-u-transition-medium: Modifier for medium animation transition between transforms
// xui-u-transition-short: Modifier for short animation transition between transforms
//
// Markup:
// <div>
// 	<div><span class="xui-panel-title">Short transition</span><svg focusable="false" class="xui-icon xui-icon xui-icon-rotate-270 xui-u-transition-short"> <use xlink:href="#xui-icon-arrow" role="presentation" /></svg></div>
// 	<div><span class="xui-panel-title">Medium transition</span><svg focusable="false" class="xui-icon xui-icon xui-icon-rotate-270 xui-u-transition-medium"> <use xlink:href="#xui-icon-arrow" role="presentation" /></svg></div>
// 	<div><span class="xui-panel-title">Long transition</span><svg focusable="false" class="xui-icon xui-icon xui-icon-rotate-270 xui-u-transition-long"> <use xlink:href="#xui-icon-arrow" role="presentation" /></svg></div>
// </div>
//
// Styleguide: Motion.5

.#{$ns}-u-transition-short {
	transition: $xui-motion-speed-fast;
}

.#{$ns}-u-transition-medium {
	transition: $xui-motion-speed-medium;
}

.#{$ns}-u-transition-long {
	transition: $xui-motion-speed-slow;
}
