@import "../vars";

// Progress indicator
//
// Components: progress-indicator
//
// Teaser: To communicate progress and indicate context.
//
// Introduction: Progress indicators are used to visually communicate progress.
//
// Styleguide: Building Blocks.Progress-Indicator

// Best practice
//
// Tips:
// Do: Use to indicate progress towards a goal
// Do: Use to indicate current position within a series of steps
// Warning: Use progress indicators sparingly, as they are relatively dominant interface elements.
//
// Styleguide: Building Blocks.Progress-Indicator.1

// Anatomy
//
// Flag: Experimental
//
// There are two progress indicator layouts for displaying a progress indicator, depending on context.
// Each contains a track and a current value.
//
// Classes:
// xui-progress: Apply to wrapper
//
// Styleguide: Building Blocks.Progress-Indicator.2

// Linear
//
// Classes:
// xui-progress-linear: Modifier for a linear progress indicator
// xui-progress-linear-wrapper: Container for a linear progress indicator
// xui-progress-linear-track: Track element
// xui-progress-linear-current: Current value element
//
// Tips:
// Do: Use as a read-only visualization of progress
// Do: Use when vertical space is limited
//
// ExampleClass: ds-example-flush ds-example-transparent
//
// Markup:
// <div aria-valuemax="8" aria-valuemin="0" aria-valuenow="2" aria-valuetext="2 of 8" class="xui-progress xui-progress-linear" role="progressbar">
// 	<div class="xui-progress-linear-wrapper">
// 		<div class="xui-progress-linear-track">
// 			<div class="xui-progress-linear-current" style="width: 25%;"></div>
// 		</div>
// 	</div>
// </div>
//
// Styleguide: Building Blocks.Progress-Indicator.2.1

// Circular
//
// Classes:
// xui-progress-circular: Modifier for a circular progress indicator
// xui-progress-circular-wrapper: Container for a circular progress indicator
// xui-progress-circular-track: Track element
// xui-progress-circular-current: Current value element
//
// Tips:
// Do: Use in navigational or interactive elements
// Do: Use when horizontal space is limited
//
// ExampleClass: ds-example-flush ds-example-transparent
//
// Markup:
// <div aria-valuemax="8" aria-valuemin="0" aria-valuenow="2" aria-valuetext="2 of 8" class="xui-progress xui-progress-circular" role="progressbar">
// 		<div>
// 			<div>
// 				<canvas class="xui-progress-circular-scaler" height="100" width="100"></canvas><svg class="xui-progress-circular-wrapper" viewbox="0 0 100 100">
// 				<defs>
// 					<mask height="100" id="myCustomProgressId-progress-mask" maskunits="userSpaceOnUse" width="100" x="0" y="0">
// 						<circle class="xui-progress-circular-mask xui-progress-roundcap" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="initial" stroke-width="11.476068685097855"></circle>
// 					</mask>
// 				</defs>
// 				<g mask="url(#myCustomProgressId-progress-mask)">
// 					<circle class="xui-progress-circular-track" cx="50" cy="50" r="44.26196565745107" stroke-width="11.476068685097855"></circle>
// 					<circle class="xui-progress-circular-current xui-progress-roundcap" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="278.106132285784" stroke-dashoffset="208.57959921433797" stroke-width="11.476068685097855"></circle>
// 				</g></svg>
// 			</div>
// 		</div>
// 		<div class="xui-progress-icon"></div>
// 	</div>
//
// Styleguide: Building Blocks.Progress-Indicator.2.2

// Size
//
// There are two main sizes progress indicators can be rendered at.
//
// Tips:
// Do: Use a standard sized progress indicator for navigational and interactive elements
// Do: Use a scaling progress indicator for precise control over width and height
// Warning: Avoid using too many different sized indicators on a single page
//
// Styleguide: Building Blocks.Progress-Indicator.3

// Standard
//
// For the circular variant, the standard progress indicator has a fixed width and height.
// For the linear variant, the standard progress indicator has a flexible width and a fixed height.
//
// ExampleClass: ds-example-flush ds-example-transparent
//
// Markup:
// <div aria-valuemax="8" aria-valuemin="0" aria-valuenow="4" aria-valuetext="4 of 8" class="xui-progress xui-progress-linear xui-margin-bottom-large" role="progressbar">
// 	<div class="xui-progress-linear-wrapper">
// 		<div class="xui-progress-linear-track">
// 			<div class="xui-progress-linear-current" style="width: 50%;"></div>
// 		</div>
// 	</div>
// </div>
// <div aria-valuemax="8" aria-valuemin="0" aria-valuenow="4" aria-valuetext="4 of 8" class="xui-progress xui-progress-circular" role="progressbar">
// 	<div>
// 		<div>
// 			<canvas class="xui-progress-circular-scaler" height="100" width="100"></canvas><svg class="xui-progress-circular-wrapper" viewbox="0 0 100 100">
// 			<defs>
// 				<mask height="100" id="myCustomProgressId-progress-mask" maskunits="userSpaceOnUse" width="100" x="0" y="0">
// 					<circle class="xui-progress-circular-mask xui-progress-roundcap" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="initial" stroke-width="11.476068685097855"></circle>
// 				</mask>
// 			</defs>
// 			<g mask="url(#myCustomProgressId-progress-mask)">
// 				<circle class="xui-progress-circular-track" cx="50" cy="50" r="44.26196565745107" stroke-width="11.476068685097855"></circle>
// 				<circle class="xui-progress-circular-current xui-progress-roundcap" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="278.106132285784" stroke-dashoffset="139.053066142892" stroke-width="11.476068685097855"></circle>
// 			</g></svg>
// 		</div>
// 	</div>
// 	<div class="xui-progress-icon"></div>
// </div>
//
// Styleguide: Building Blocks.Progress-Indicator.3.1

// Grow
//
// Both growing indicators inherit width and height from their parent, so they can be used in combination with other elements that have specifically defined dimensions.
// The stroke width of the circular variant also scales tangentially to it's containing element at all times.
// To create a growing progress indicator, apply the following modifier.
//
// ExampleClass: ds-example-flush ds-example-transparent
//
// Classes:
// xui-progress-grow: Modifier for a growing progress indicator
// ExampleClass: ds-example-flush ds-example-transparent
//
// Markup:
// <div aria-valuemax="8" aria-valuemin="0" aria-valuenow="4" aria-valuetext="4 of 8" class="xui-progress xui-progress-linear xui-progress-grow xui-margin-bottom-large" role="progressbar" style="height: 10px">
// 	<div class="xui-progress-linear-wrapper">
// 		<div class="xui-progress-linear-track">
// 			<div class="xui-progress-linear-current" style="width: 50%;"></div>
// 		</div>
// 	</div>
// </div>
// <div aria-valuemax="8" aria-valuemin="0" aria-valuenow="4" aria-valuetext="4 of 8" class="xui-progress xui-progress-circular xui-progress-grow" role="progressbar" style="width: 100px">
// 	<div>
// 		<div>
// 			<canvas class="xui-progress-circular-scaler" height="100" width="100"></canvas><svg class="xui-progress-circular-wrapper" viewbox="0 0 100 100">
// 			<defs>
// 				<mask height="100" id="myCustomProgressId-progress-mask" maskunits="userSpaceOnUse" width="100" x="0" y="0">
// 					<circle class="xui-progress-circular-mask xui-progress-roundcap" cx="50" cy="50" r="45.33016797585764" stroke-dasharray="initial" stroke-width="9.339664048284721"></circle>
// 				</mask>
// 			</defs>
// 			<g mask="url(#myCustomProgressId-progress-mask)">
// 				<circle class="xui-progress-circular-track" cx="50" cy="50" r="45.33016797585764" stroke-width="9.339664048284721"></circle>
// 				<circle class="xui-progress-circular-current xui-progress-roundcap" cx="50" cy="50" r="45.33016797585764" stroke-dasharray="284.81784539789135" stroke-dashoffset="142.40892269894567" stroke-width="9.339664048284721"></circle>
// 			</g></svg>
// 		</div>
// 	</div>
// 	<div class="xui-progress-icon"></div>
// </div>
//
// Styleguide: Building Blocks.Progress-Indicator.3.2

// Color
//
// The default color for progress indicators is blue.
// However, you can set the track or current progress to any standard color you like.
// To do this, simply set the `data-xui-progress-current-color` and `data-xui-progress-total-color` attributes to any of the following colors.
// Note that `xui-color-red` is reserved for the error state.
//
// Definitions:
// Orange: `xui-color-orange`: `orange`
// Yellow: `xui-color-yellow`: `yellow`
// Green: `xui-color-green`: `green`
// Mint: `xui-color-mint`: `mint`
// Turquoise: `xui-color-turquoise`:`turquoise`
// Blue: `xui-color-blue`: `blue`
// Violet: `xui-color-violet`: `violet`
// Grape: `xui-color-grape`: `grape`
// Pink: `xui-color-pink`: `pink`
// Grey: `xui-color-grey-1`: `grey`
//
// Tips:
// Do: Use custom colors to align progress indicators to the theme of the application
// Do: Use custom colors when indicating sentiment other than a simple error
// Warning: Avoid using multiple coloured progress-indictaors on a single screen unless they indicate sentiment
// Don't: Don't use custom colors to indicate a simple error, use the pre-defined error classes instead
//
// ExampleClass: ds-example-flush ds-example-transparent
//
// Markup:
// <div data-xui-progress-current-color='green' data-xui-progress-total-color='yellow' aria-valuemax="8" aria-valuemin="0" aria-valuenow="4" aria-valuetext="4 of 8" class="xui-progress xui-progress-linear xui-margin-bottom-large" role="progressbar">
//  <div class="xui-progress-linear-wrapper">
//    <div class="xui-progress-linear-track">
//      <div class="xui-progress-linear-current" style="width: 50%;"></div>
//    </div>
//  </div>
// </div>
// <div data-xui-progress-current-color='green' data-xui-progress-total-color='yellow' aria-valuemax="8" aria-valuemin="0" aria-valuenow="4" aria-valuetext="4 of 8" class="xui-progress xui-progress-circular" role="progressbar">
//  <div>
//    <div>
//      <canvas class="xui-progress-circular-scaler" height="100" width="100"></canvas><svg class="xui-progress-circular-wrapper" viewbox="0 0 100 100">
//      <defs>
//        <mask height="100" id="myCustomProgressId-progress-mask3" maskunits="userSpaceOnUse" width="100" x="0" y="0">
//          <circle class="xui-progress-circular-mask xui-progress-roundcap" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="initial" stroke-width="11.476068685097855"></circle>
//        </mask>
//      </defs>
//      <g mask="url(#myCustomProgressId-progress-mask3)">
//        <circle class="xui-progress-circular-track" cx="50" cy="50" r="44.26196565745107" stroke-width="11.476068685097855"></circle>
//        <circle class="xui-progress-circular-current xui-progress-roundcap" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="278.106132285784" stroke-dashoffset="139.053066142892" stroke-width="11.476068685097855"></circle>
//      </g></svg>
//    </div>
//  </div>
//  <div class="xui-progress-icon"></div>
// </div>
//
// Styleguide: Building Blocks.Progress-Indicator.4

// Segments
//
// In some cases, it is desirable to create visually distinct steps, within a single progress indicator.
// For both variants, this is handled in React.
// For the circular variant, this is achieved via a mask.
// For the linear variant, several `xui-progress-linear-segment` elements are created within `xui-progress-indicator-wrapper`.
//
// Tips:
// Do: Use segments when there are distinct steps within a larger goal, such as days in the week
// Warning: Currently only constand step widths are possible.
// Don't: Avoid using too many segments in the circular variant as they become visually indecipherable, use a linear instead
//
// ExampleClass: ds-example-flush ds-example-transparent
//
// Markup:
// <div aria-valuemax="4" aria-valuemin="0" aria-valuenow="2" aria-valuetext="2 of 4" class="xui-progress xui-progress-linear xui-margin-bottom-large" role="progressbar">
// 	<div class="xui-progress-linear-wrapper">
// 		<div class="xui-progress-linear-segment xui-progress-linear-current"></div>
// 		<div class="xui-progress-linear-segment xui-progress-linear-current"></div>
// 		<div class="xui-progress-linear-segment xui-progress-linear-track"></div>
// 		<div class="xui-progress-linear-segment xui-progress-linear-track"></div>
// 	</div>
// </div>
// <div aria-valuemax="4" aria-valuemin="0" aria-valuenow="2" aria-valuetext="2 of 4" class="xui-progress xui-progress-circular" role="progressbar">
// 	<div>
// 		<div>
// 			<canvas class="xui-progress-circular-scaler" height="100" width="100"></canvas><svg class="xui-progress-circular-wrapper" viewbox="0 0 100 100">
// 			<defs>
// 				<mask height="100" id="myCustomProgressId-progress-mask2" maskunits="userSpaceOnUse" width="100" x="0" y="0">
// 					<circle class="xui-progress-circular-mask xui-progress-roundcap" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="51.16482317528943, 18.36170989615657" stroke-dashoffset="-9.180854948078284" stroke-width="11.476068685097855"></circle>
// 				</mask>
// 			</defs>
// 			<g mask="url(#myCustomProgressId-progress-mask2)">
// 				<circle class="xui-progress-circular-track" cx="50" cy="50" r="44.26196565745107" stroke-width="11.476068685097855"></circle>
// 				<circle class="xui-progress-circular-current" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="278.106132285784" stroke-dashoffset="139.053066142892" stroke-width="11.476068685097855"></circle>
// 			</g></svg>
// 		</div>
// 	</div>
// 	<div class="xui-progress-icon"></div>
// </div>
//
// Styleguide: Building Blocks.Progress-Indicator.5

// Indicating completion
//
// To indicate progress, the length of `xui-progress-*-current` is incremented via React.
// However, once it reaches the end or exceeds the total value there are no automatic visual changes.
// To trigger the completed state, apply the following modifier.
// Note that this is only applicable to the circular variant.
//
// Classes:
// xui-progress-complete: Modifier for a complete progress indicator
// ExampleClass: ds-example-flush ds-example-transparent
//
// ExampleClass: ds-example-flush ds-example-transparent
//
// Markup:
// <div aria-valuemax="4" aria-valuemin="0" aria-valuenow="4" aria-valuetext="4 of 4" class="xui-progress xui-progress-circular xui-progress-complete" role="progressbar">
// 	<div>
// 		<div>
// 			<canvas class="xui-progress-circular-scaler" height="100" width="100"></canvas><svg class="xui-progress-circular-wrapper" viewbox="0 0 100 100">
// 			<defs>
// 				<mask height="100" id="myCustomProgressId-progress-mask" maskunits="userSpaceOnUse" width="100" x="0" y="0">
// 					<circle class="xui-progress-circular-mask xui-progress-roundcap" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="initial" stroke-width="11.476068685097855"></circle>
// 				</mask>
// 			</defs>
// 			<g mask="url(#myCustomProgressId-progress-mask)">
// 				<circle class="xui-progress-circular-track" cx="50" cy="50" r="44.26196565745107" stroke-width="11.476068685097855"></circle>
// 				<circle class="xui-progress-circular-current xui-progress-roundcap" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="278.106132285784" stroke-dashoffset="0" stroke-width="11.476068685097855"></circle>
// 			</g></svg>
// 		</div>
// 	</div>
// 	<div class="xui-progress-icon">
// 		<svg class="xui-progress-icon-complete" viewbox="0 0 9 7">
// 		<polygon points="0 4 1 3 3 5 8 0 9 1 3 7"></polygon></svg>
// 	</div>
// </div>
//
// Styleguide: Building Blocks.Progress-Indicator.6

// Handling overflow
//
// Progress indicators accept current values that exceed the total value.
// If desired, any overflow can be highlighted in an error state and scaled proportionally to the total value.
// To do this, apply the following modifier.
//
// Classes:
// xui-progress-overflow: Modifier for a progress indicator with overflow
//
// ExampleClass: ds-example-flush ds-example-transparent
//
// Markup:
// <div aria-valuemax="4" aria-valuemin="0" aria-valuenow="5" aria-valuetext="5 of 4" class="xui-progress xui-progress-linear xui-progress-overflow xui-margin-bottom-large" role="progressbar">
// 	<div class="xui-progress-linear-wrapper">
// 		<div class="xui-progress-linear-track">
// 			<div class="xui-progress-linear-current" style="width: 80%;"></div>
// 		</div>
// 	</div>
// </div>
// <div aria-valuemax="4" aria-valuemin="0" aria-valuenow="5" aria-valuetext="5 of 4" class="xui-progress xui-progress-circular xui-progress-overflow" role="progressbar">
// 	<div>
// 		<div>
// 			<canvas class="xui-progress-circular-scaler" height="100" width="100"></canvas><svg class="xui-progress-circular-wrapper" viewbox="0 0 100 100">
// 			<defs>
// 				<mask height="100" id="myCustomProgressId-progress-mask" maskunits="userSpaceOnUse" width="100" x="0" y="0">
// 					<circle class="xui-progress-circular-mask xui-progress-roundcap" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="initial" stroke-width="11.476068685097855"></circle>
// 				</mask>
// 			</defs>
// 			<g mask="url(#myCustomProgressId-progress-mask)">
// 				<circle class="xui-progress-circular-track" cx="50" cy="50" r="44.26196565745107" stroke-width="11.476068685097855"></circle>
// 				<circle class="xui-progress-circular-current xui-progress-roundcap" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="278.106132285784" stroke-dashoffset="55.62122645715679" stroke-width="11.476068685097855"></circle>
// 			</g></svg>
// 		</div>
// 	</div>
// 	<div class="xui-progress-icon"></div>
// </div>
//
// Styleguide: Building Blocks.Progress-Indicator.7

// Handling errors
//
// In addition to overflow, there are two generic error states that can also be applied.
// Note that these styles take precedent over any custom color.
//
// Styleguide: Building Blocks.Progress-Indicator.8

// Soft errors
//
// To indicate an error state, but still visibly show progress, apply the following modifier.
//
// ExampleClass: ds-example-flush ds-example-transparent
//
// Markup:
// <div aria-valuemax="4" aria-valuemin="0" aria-valuenow="2" aria-valuetext="2 of 4" class="xui-progress xui-progress-linear xui-progress-error-soft xui-margin-bottom-large" role="progressbar">
// 	<div class="xui-progress-linear-wrapper">
// 		<div class="xui-progress-linear-track">
// 			<div class="xui-progress-linear-current" style="width: 50%;"></div>
// 		</div>
// 	</div>
// </div>
// <div aria-valuemax="4" aria-valuemin="0" aria-valuenow="2" aria-valuetext="2 of 4" class="xui-progress xui-progress-circular xui-progress-error-soft" role="progressbar">
// 	<div>
// 		<div>
// 			<canvas class="xui-progress-circular-scaler" height="100" width="100"></canvas><svg class="xui-progress-circular-wrapper" viewbox="0 0 100 100">
// 			<defs>
// 				<mask height="100" id="myCustomProgressId-progress-mask" maskunits="userSpaceOnUse" width="100" x="0" y="0">
// 					<circle class="xui-progress-circular-mask xui-progress-roundcap" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="initial" stroke-width="11.476068685097855"></circle>
// 				</mask>
// 			</defs>
// 			<g mask="url(#myCustomProgressId-progress-mask)">
// 				<circle class="xui-progress-circular-track" cx="50" cy="50" r="44.26196565745107" stroke-width="11.476068685097855"></circle>
// 				<circle class="xui-progress-circular-current xui-progress-roundcap" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="278.106132285784" stroke-dashoffset="139.053066142892" stroke-width="11.476068685097855"></circle>
// 			</g></svg>
// 		</div>
// 	</div>
// 	<div class="xui-progress-icon"></div>
// </div>
//
// Classes:
// xui-progress-error-soft: Modifier for a soft error state
//
// Styleguide: Building Blocks.Progress-Indicator.8.1

// Hard errors
//
// To indicate an important error state that conceals progress, apply the following modifier.
// The default content is an icon, however, you can add your own text or even a custom icon.
// Note that this is only applicable to the circular variant.
//
// Classes:
// xui-progress-error-hard:  Modifier for a hard error state
//
// ExampleClass: ds-example-flush ds-example-transparent
//
// Markup:
// <div aria-valuemax="4" aria-valuemin="0" aria-valuenow="2" aria-valuetext="2 of 4" class="xui-progress xui-progress-circular xui-progress-error-hard" role="progressbar">
// 	<div>
// 		<div>
// 			<canvas class="xui-progress-circular-scaler" height="100" width="100"></canvas><svg class="xui-progress-circular-wrapper" viewbox="0 0 100 100">
// 			<defs>
// 				<mask height="100" id="myCustomProgressId-progress-mask" maskunits="userSpaceOnUse" width="100" x="0" y="0">
// 					<circle class="xui-progress-circular-mask xui-progress-roundcap" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="initial" stroke-width="11.476068685097855"></circle>
// 				</mask>
// 			</defs>
// 			<g mask="url(#myCustomProgressId-progress-mask)">
// 				<circle class="xui-progress-circular-track" cx="50" cy="50" r="44.26196565745107" stroke-width="11.476068685097855"></circle>
// 				<circle class="xui-progress-circular-current xui-progress-roundcap" cx="50" cy="50" r="44.26196565745107" stroke-dasharray="278.106132285784" stroke-dashoffset="139.053066142892" stroke-width="11.476068685097855"></circle>
// 			</g></svg>
// 		</div>
// 	</div>
// 	<div class="xui-progress-icon">
// 		<svg class="xui-progress-icon-error" viewbox="0 0 2 7">
// 		<path d="M0,5 L1.99801961,5 L1.99801961,6.99797571 L0,6.99797571 L0,5 Z M0,0 L1.99801961,0 L1.99801961,4 L0,4 L0,0 Z"></path></svg>
// 	</div>
// </div>
//
// Styleguide: Building Blocks.Progress-Indicator.8.2

// Accessibility
//
// Make sure to apply the `progressbar` role to the progress indicator.
// Additionally, if the actual value of progress can be determined, make sure to indicate this using `aria-valuenow`, `aria-valuemin`, and `aria-valuemax` attributes.
// If the progress value is indeterminate, omit the `aria-valuenow` attribute.
// Screenreaders will generally render the value of `aria-valuenow` as a percent of the range between the value of `aria-valuemin` and `aria-valuemax`, unless `aria-valuetext` is specified.
// Additionally, a tooltip is also available out of the box on hover.
// The default message is the `aria-valuetext` value, but you can specify a custom message too.
//
// Styleguide: Building Blocks.Progress-Indicator.8

$xui-progress-circular-min-width: 20px;
$xui-progress-linear-min-height: 4px;
$xui-progress-total-color: $xui-color-grey-alpha-6;
$xui-progress-current-color: $xui-color-blue;
$xui-progress-error-color: $xui-color-red;
$xui-progress-colors: (
	(orange,  $xui-color-orange),
	(yellow,  $xui-color-yellow),
	(green,  $xui-color-green),
	(mint,  $xui-color-mint),
	(turquoise,  $xui-color-turquoise),
	(blue,  $xui-color-blue),
	(violet,  $xui-color-violet),
	(grape,  $xui-color-grape),
	(pink,  $xui-color-pink),
	(grey,  $xui-color-grey-1),
);

@mixin addTotalTrackColor($color: $xui-progress-total-color) {

	&:not(.#{$ns}-progress-overflow) .#{$ns}-progress-linear-track {
		background: $color;
	}

	&:not(.#{$ns}-progress-overflow) .#{$ns}-progress-circular-track {
		stroke: $color;
	}
}

@mixin addCurrentTrackColor($color: $xui-progress-current-color) {

	&.#{$ns}-progress-complete .#{$ns}-progress-icon,
	&:not(.#{$ns}-progress-error-soft) .#{$ns}-progress-linear-current {
		background: $color;
	}

	&:not(.#{$ns}-progress-error-soft) .#{$ns}-progress-circular-current {
		stroke: $color;
	}
}

.#{$ns}-progress {
	outline: 0;
	position: relative;

	@include addTotalTrackColor();
	@include addCurrentTrackColor();
}

.#{$ns}-progress-circular {
	height: auto;
	width: $xui-progress-circular-min-width;
}

.#{$ns}-progress-circular.#{$ns}-progress-grow {
	min-width: $xui-progress-circular-min-width;
	width: 100%;
}

.#{$ns}-progress-circular-scaler {
	display: block;
	height: auto;
	width: 100%;
}

// TODO go through this file and rename classes to match our conventions (-- rather than - for subcomponents)
.#{$ns}-progress-circular-wrapper {
	display: block;
	height: 100%;
	left: 0;
	position: absolute;
	top: 0;
	transform: rotate(-90deg);
	width: 100%;
}

.#{$ns}-progress-circular-track,
.#{$ns}-progress-circular-current {
	fill: none;
}

.#{$ns}-progress-overflow .#{$ns}-progress-circular-track,
.#{$ns}-progress-error-soft .#{$ns}-progress-circular-current {
	stroke: $xui-progress-error-color;
}

.#{$ns}-progress-circular-current {
	transition: {
		duration: $xui-motion-speed-medium;
		property: background stroke-dashoffset;
	}
}

.#{$ns}-progress-circular-mask {
	fill: black;
	stroke: white;
}

.#{$ns}-progress-circular-content {
	border-radius: 50%;
	bottom: 0;
	left: 0;
	overflow: hidden;
	position: absolute;
	right: 0;
	top: 0;
}

.#{$ns}-progress-linear {
	height: $xui-progress-linear-min-height;
	width: 100%;
}

.#{$ns}-progress-linear.#{$ns}-progress-grow {
	height: 100%;
	min-height: $xui-progress-linear-min-height;
}

.#{$ns}-progress-linear-wrapper,
.#{$ns}-progress-linear-track,
.#{$ns}-progress-linear-current {
	border-radius: 9999px;
	height: 100%;
	width: 100%;
}

.#{$ns}-progress-linear-wrapper {
	display: flex;
	overflow: hidden;
}

.#{$ns}-progress-overflow .#{$ns}-progress-linear-track,
.#{$ns}-progress-error-soft .#{$ns}-progress-linear-current,
.#{$ns}-progress-error-hard .#{$ns}-progress-linear-current {
	background: $xui-progress-error-color;
}

.#{$ns}-progress-linear-current {
	will-change: width;
	transition: {
		duration: $xui-motion-speed-medium;
		property: background width;
	}
}

.#{$ns}-progress-linear-segment {
	margin: 0 4px;

	&:first-child {
		margin-left: 0;
	}

	&:last-child {
		margin-right: 0;
	}
}

.#{$ns}-progress-linear .#{$ns}-progress-icon {
	display: none;
}

.#{$ns}-progress-roundcap {
	stroke-linecap: round;
}

.#{$ns}-progress-hitbox {
	height: 100%;
	left: 0;
	position: absolute;
	top: 0;
	width: 100%;
}

// TODO: remove this in XUI 14. This class was added in 13.1.0, but replaced in 13.2.0
.#{$ns}-progress-tooltip {
	bottom: calc(100% + 5px);
	display: block;
	position: absolute;
	right: calc(100% + 5px);
	white-space: nowrap;
}

// Specificity exists here to match that of the tooltip classes
.#{$ns}-progress .#{$ns}-progress--tooltip {
	display: block;
	height: 100%;
	line-height: 1;
	width: 100%;
}

.#{$ns}-progress-complete .#{$ns}-progress-icon,
.#{$ns}-progress-error-hard .#{$ns}-progress-icon {
	opacity: 1;
	transform: scale(1);
}

.#{$ns}-progress-error-hard .#{$ns}-progress-icon {
	background: $xui-progress-error-color;
}

.#{$ns}-progress-icon {
	align-items: center;
	border-radius: 50%;
	color: $xui-color-white;
	display: flex;
	height: 100%;
	justify-content: center;
	left: 0;
	opacity: 0;
	position: absolute;
	top: 0;
	transform: scale(0.5);
	transition: {
		duration: $xui-motion-speed-medium;
		property: opacity transform;
	};
	width: 100%;
}

.#{$ns}-progress-icon-complete,
.#{$ns}-progress-icon-error {
	display: block;
	fill: currentColor;
}

.#{$ns}-progress-icon-complete {
	height: 8px;
	width: 10px;
}

.#{$ns}-progress-grow .#{$ns}-progress-icon-complete {
	height: auto;
	width: 50%;
}

.#{$ns}-progress-icon-error {
	height: 7px;
	width: 2px;
}

.#{$ns}-progress-grow .#{$ns}-progress-icon-error {
	height: 30%;
	width: auto;
}

@for $i from 1 through length($xui-progress-colors) {

	$color: nth($xui-progress-colors, $i);
	$key: nth($color, 1);
	$value: nth($color, 2);

	[data-#{$ns}-progress-total-color="#{$key}"] {
		@include addTotalTrackColor($value);
	}

	[data-#{$ns}-progress-current-color="#{$key}"] {
		@include addCurrentTrackColor($value);
	}
}
