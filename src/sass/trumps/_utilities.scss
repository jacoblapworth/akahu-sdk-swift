/**
 * A collection of general-purpose utility rules.
 */

@import "../mixins";
@import "../vars";

// Utility classes
//
// Weight: 2.9
//
// Styleguide: Utilities

// Display
//
// Classes that can be added to any element to hide it from view.
//
// Implementation of rules here are based on the A11Y Project's [How to Hide Content](http://a11yproject.com/posts/how-to-hide-content/).
//
// Classes:
// xui-u-hidden: Hide the element using `display` and `visibility` properties
// xui-u-hidden-mobile: Hide the element on mobile only using `display` property
// xui-u-hidden-visually: Hide the element using `width` and `height` properties
//
// Markup:
//  <section class="xui-u-container xui-u-hidden">hidden</section>
//  <section class="xui-u-container xui-u-hidden-visually">hidden visually</section>
//  <section class="xui-u-container xui-u-hidden-mobile">hidden on mobile</section>
//
// Styleguide: Utilities.1

// scss-lint:disable ImportantRule
.#{$ns}-u-hidden {
	display: none !important;
	// Screen readers sometimes ignore display:none as per
	// http://www.456bereastreet.com/archive/200711/screen_readers_sometimes_ignore_displaynone/
	visibility: hidden !important;
}

.#{$ns}-u-hidden-visually {
	@include xui-utility-hidden-visually;
}

// scss-lint:disable ImportantRule
.#{$ns}-u-hidden-mobile {
	@include xui-breakpoint-narrow {
		display: none !important;
	}
}

.#{$ns}-u-hidden-mobile-up {
	@include xui-breakpoint-narrow-up {
		display: none !important;
	}
}

// Overflow
//
// The overflow property specifies whether to clip content, render scrollbars or just display content when it overflows its block level container.
//
// Classes:
// xui-u-overflow-hidden: Content is clipped, with no scrollbars
//
// Markup:
// <section class="xui-u-overflow-hidden" style="height:62px">
//   <p>
//     The utility classes, like the grid system and now the margin/padding classes, provide atomic control but don't come with (and can't come with) any consideration for a consistent approach to responsive design.
//     You end up with needing extra classes to define when and how the grid should decompose and extra classes to define when and how margins and padding should shift for various viewports.
//   </p>
//
//   <p>
//     Any design changes can also no longer be easily updated across all parts of the app that use XUI since layout and margin/padding decisions have been pushed off to individual teams/pages.
//     (I'm also unsure how this works when implementing React components. Is there configuration in each component to determine which margin/padding to use?)
//   </p>
// </section>
//
// Styleguide: Utilities.1.1

.#{$ns}-u-overflow-hidden {
	overflow: hidden !important;
}

// Flex
//
// Flex classes can be used to create flexible multi-column layouts.
//
// * Even space between the columns, takes up the full width of the row container
//   * `xui-u-flex-space-between`	Modifier for all viewport sizes
//   * `xui-u-flex-space-between-medium`	Modifier for medium breakpoint
//   * `xui-u-flex-space-between-wide`	Modifier for large breakpoint
//
// * Even space between and around the columns
//   * `xui-u-flex-space-around`	Modifier for all viewport sizes
//   * `xui-u-flex-space-around-medium`	Modifier for medium breakpoint
//   * `xui-u-flex-space-around-wide`	Modifier for large breakpoint
//
// * Group and center the columns within the row container
//   * `xui-u-flex-justify-center` Modifier for all viewport sizes
//   * `xui-u-flex-justify-center-medium` Modifier for medium breakpoint
//   * `xui-u-flex-justify-center-wide` Modifier for large breakpoint
//
// * Group and align the columns within the row container to the left hand side
//   * `xui-u-flex-justify-left` Modifier for all viewport sizes
//   * `xui-u-flex-justify-left-medium` Modifier for medium breakpoint
//   * `xui-u-flex-justify-left-wide` Modifier for large breakpoint
//
// * Group and align the columns within the row container to the right hand side
//   * `xui-u-flex-justify-right` Modifier for all viewport sizes
//   * `xui-u-flex-justify-right-medium` Modifier for medium breakpoint
//   * `xui-u-flex-justify-right-wide` Modifier for large breakpoint
//
// Classes:
// xui-u-flex: Applies `display: flex` to an element
// xui-u-flex-inline: Applies `display: inline-flex` to an element
// xui-u-flex-none: Applies `flex: none` to an element
// xui-u-flex-horizontal: Modifier to display child items in a horizontal order
// xui-u-flex-vertical: Modifier to display child items in a vertical order
// xui-u-flex-verticallycentered: Modifier to display child items vertically centered
// xui-u-flex-grow: Modifier for a flex child which fills remaining space
// xui-u-flex-inherit: Inherit flex properties. Firefox does not handle display: flex on buttons, so this can be applied to a child wrapper node inside the button element to achieve the desired effect.
// xui-u-flex-space-between: Sets justify-content: space-between
// xui-u-flex-space-around: Sets justify-content: space-around
// xui-u-flex-justify-left: Sets justify-content: flex-start
// xui-u-flex-justify-right: Sets justify-content: flex-end
// xui-u-flex-justify-center: Sets justify-content: center
// xui-u-flex-space-between-medium: Sets justify-content: space-between for the medium viewport width breakpoint
// xui-u-flex-space-around-medium: Sets justify-content: space-around for the medium viewport width breakpoint
// xui-u-flex-justify-left-medium: Sets justify-content: flex-start for the medium viewport width breakpoint
// xui-u-flex-justify-right-medium: Sets justify-content: flex-end for the medium viewport width breakpoint
// xui-u-flex-justify-center-medium: Sets justify-content: center for the medium viewport width breakpoint
// xui-u-flex-space-between-wide: Sets justify-content: space-between for the wide viewport width breakpoint
// xui-u-flex-space-around-wide: Sets justify-content: space-around for the wide viewport width breakpoint
// xui-u-flex-justify-left-wide: Sets justify-content: flex-start for the wide viewport width breakpoint
// xui-u-flex-justify-right-wide: Sets justify-content: flex-end for the wide viewport width breakpoint
// xui-u-flex-justify-center-wide: Sets justify-content: center for the wide viewport width breakpoint
//
// Markup:
// <div class="xui-panel">
//   <header class="xui-panel--header xui-u-flex xui-u-flex-verticallycentered xui-padding">
//     <h3 class="xui-panel--heading xui-heading-panel xui-u-flex-horizontal xui-u-flex-grow">Panel Header</h3>
//     <button type="button" class="xui-button xui-button-standard xui-u-flex-horizontal">Button</button>
//   </header>
// </div>
// <br />
// <div class="xui-u-flex">
//   <div class="xui-panel xui-u-flex xui-u-flex-vertical">
//     <div class="xui-panel--header">Header</div>
//     <div class="xui-panel--section">Content</div>
//     <div class="xui-panel--footer">Footer</div>
//   </div>
//   <div class="xui-panel xui-u-flex xui-u-flex-vertical xui-u-flex-grow">
//     <div class="xui-panel--header">Header</div>
//     <div class="xui-panel--section">Content</div>
//     <div class="xui-panel--footer">Footer</div>
//   </div>
//   <div class="xui-panel xui-u-flex xui-u-flex-vertical">
//     <div class="xui-panel--header">Header</div>
//     <div class="xui-panel--section">Content</div>
//     <div class="xui-panel--footer">Footer</div>
//   </div>
// </div>
//
// Styleguide: Utilities.2

.#{$ns}-u-flex {
	display: flex;
}

.#{$ns}-u-flex-inline {
	display: inline-flex;
}

.#{$ns}-u-flex-none {
	flex: none;
}

.#{$ns}-u-flex-verticallycentered {
	align-items: center;
}

.#{$ns}-u-flex-horizontallycentered {
	justify-content: center;
}

.#{$ns}-u-flex-horizontal {
	flex-direction: row;
}

.#{$ns}-u-flex-vertical {
	flex-direction: column;
}

.#{$ns}-u-spacebetween {
	justify-content: space-between;
}

.#{$ns}-u-flex-1 {
	flex: 1;
}

.#{$ns}-u-flex-grow {
	flex-grow: 1;
}

.#{$ns}-u-flex-inherit {
	align-items: inherit;
	display: inherit;
	flex-direction: inherit;
	justify-content: inherit;
	width: inherit; // For IE11 and Chrome
}

// Flex row utilities
.#{$ns}-u-flex-space-between {
	justify-content: space-between;
}

.#{$ns}-u-flex-space-around {
	justify-content: space-around;
}

.#{$ns}-u-flex-justify-left {
	justify-content: flex-start;
}

.#{$ns}-u-flex-justify-right {
	justify-content: flex-end;
}

.#{$ns}-u-flex-justify-center {
	justify-content: center;
}

// Flex row responsive utilities
@include xui-breakpoint-medium {
	.#{$ns}-u-flex-space-between-medium {
		justify-content: space-between;
	}

	.#{$ns}-u-flex-space-around-medium {
		justify-content: space-around;
	}

	.#{$ns}-u-flex-justify-left-medium {
		justify-content: flex-start;
	}

	.#{$ns}-u-flex-justify-right-medium {
		justify-content: flex-end;
	}

	.#{$ns}-u-flex-justify-center-medium {
		justify-content: center;
	}
}

@include xui-breakpoint-wide {
	.#{$ns}-u-flex-space-between-wide {
		justify-content: space-between;
	}

	.#{$ns}-u-flex-space-around-wide {
		justify-content: space-around;
	}

	.#{$ns}-u-flex-justify-left-wide {
		justify-content: flex-start;
	}

	.#{$ns}-u-flex-justify-right-wide {
		justify-content: flex-end;
	}

	.#{$ns}-u-flex-justify-center-wide {
		justify-content: center;
	}
}

// Full Width
//
// Sometimes you want an element to have full width.
//
// Classes:
// xui-u-fullwidth: Modifier for a full-width element
//
// Markup:
// <div>
//   <span class="xui-button xui-button-standard xui-u-fullwidth">Wide</span>
// </div>
//
// Styleguide: Utilities.3

.#{$ns}-u-fullwidth {
	display: block;
	width: 100%;
}

// Preventing Selection
//
// For textual elements where the user could perform multiple clicks in quick succession, the browser
// may end up highlighting the text (interpreting a double click as an instruction to select
// the surrounding text). If this behaviour is undesirable, use `xui-u-noselect`.
//
// Classes:
// xui-u-noselect: Modifier for an element that should not allow user selection
//
// Markup:
// <p class="xui-u-noselect">Text <svg class="xui-icon xui-icon-inline"><use xlink:href="#xui-icon-caret" role="presentation"/></svg</p>
//
// Styleguide: Utilities.5

.#{$ns}-u-noselect {
	user-select: none;
}

// Resizing
//
// May be applied to elements to disable resize attributes. The primary use for this is for textarea, but has been added as a utility as resize can be applied to several other
// elements.
//
// Classes:
// xui-u-resize-none: Modifier to disable resizing completely
// xui-u-resize-vertical: Modifier to enable vertical resizing and disable horizontal resizing
//
// Markup:
// <div>
//   <textarea class="xui-input xui-u-resize-none">Not resizable</textarea>
//   <textarea class="xui-input xui-u-resize-vertical">Vertically resizable</textarea>
// </div>
//
// Styleguide: Utilities.7

.#{$ns}-u-resize-none {
	resize: none;
}

.#{$ns}-u-resize-vertical {
	resize: vertical;
}

// Rotation
//
// May be applied to elements such as icons to rotate them.
//
// Classes:
// xui-u-rotate-90: Modifier to rotate the element by 90 degrees
// xui-u-rotate-180: Modifier to rotate the element by 180 degrees
// xui-u-rotate-270: Modifier to rotate the element by 270 degrees
//
// Markup:
// <svg class="xui-icon xui-u-rotate-90"><use xlink:href="#xui-icon-arrow" role="presentation"/></svg>
// <svg class="xui-icon xui-u-rotate-180"><use xlink:href="#xui-icon-arrow" role="presentation"/></svg>
// <svg class="xui-icon xui-u-rotate-270"><use xlink:href="#xui-icon-arrow" role="presentation"/></svg>
//
// Styleguide: Utilities.8

.#{$ns}-u-rotate-90 {
	transform: rotate(90deg);
}

.#{$ns}-u-rotate-180 {
	transform: rotate(180deg);
}

.#{$ns}-u-rotate-270 {
	transform: rotate(-90deg);
}
